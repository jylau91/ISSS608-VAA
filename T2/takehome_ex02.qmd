---
title: "Take-Home Exercise 02"
author: "Lau Jia Yi"
date: 17 May 2025
date-modified: "last-modified"
format: html
editor: visual
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Loading the packages & data

```{r}
pacman::p_load(tidyverse, jsonlite,
               tidygraph, ggraph,
               SmartEDA)
```

```{r}
filah <- fromJSON("data/FILAH.json")
```

### **Inspecting knowledge graph structure**

```{r}
glimpse(filah)
```

::: callout-warning
Notice that *Industry* field is in list data type. In general, this data type is not acceptable by `tbl_graph()` of **tidygraph**. In order to avoid error arise when building tidygraph object, it is wiser to exclude this field from the edges data table. However, it might be still useful in subsequent analysis.
:::

Extracting the edges & nodes

```{r}
filah_nodes <- as_tibble(filah$nodes)
filah_edges <- as_tibble(filah$links)
```

# Initial EDA

```{r}
ExpCatViz(data=filah_nodes,
          col="lightblue")
```

```{r}
ExpCatViz(data=filah_edges,
          col="lightblue")
```

```{r}
ExpNumViz(filah_nodes)

```

```{r}
ExpNumViz(filah_edges)

```

## **Data Cleaning and Wrangling**

### **Cleaning and wrangling nodes**

```{r}
filah_nodes_cleaned <- filah_nodes %>%
  mutate(id = as.character(id)) %>%
  filter(!is.na(id)) %>%
  distinct(id, .keep_all = TRUE) %>%
  select(id, type, label)   
```

### **Cleaning and wrangling edges**

```{r}
filah_edges_cleaned <- filah_edges %>%
  rename(from = source, to = target) %>%
  mutate(across(c(from, to), as.character)) %>%
  filter(from %in% filah_nodes_cleaned$id, to %in% filah_nodes_cleaned$id)

# Remove problematic columns from edge table for graph building
filah_edges_min <- filah_edges_cleaned %>%
  select(from, to, role)  # Only basic fields needed for graph structure
```

### Building the tidygraph object

```{r}
filah_graph <- tbl_graph(
  nodes = filah_nodes_cleaned, 
  edges = filah_edges_min, 
  directed = TRUE)
```

```{r}
load_and_prepare_graph <- function(json_path) {
  # === Step 1: Load JSON ===
  raw_data <- fromJSON(json_path)
  
  # === Step 2: Extract nodes and edges ===
  nodes <- as_tibble(raw_data$nodes)
  edges <- as_tibble(raw_data$links)
  
  # === Step 3: Clean nodes ===
  nodes_cleaned <- nodes %>%
    mutate(id = as.character(id)) %>%
    filter(!is.na(id)) %>%
    distinct(id, .keep_all = TRUE) %>%
    select(id, type, label)
  
  # === Step 4: Clean edges ===
  edges_cleaned <- edges %>%
    rename(from = source, to = target) %>%
    mutate(across(c(from, to), as.character)) %>%
    filter(from %in% nodes_cleaned$id, to %in% nodes_cleaned$id) %>%
    select(from, to, role)
  
  # === Step 5: Build graph ===
  graph <- tbl_graph(
    nodes = nodes_cleaned,
    edges = edges_cleaned,
    directed = TRUE
  )
  
  return(graph)
}
```

```{r}
filah_graph <- load_and_prepare_graph("data/FILAH.json")
trout_graph <- load_and_prepare_graph("data/TROUT.json")
journalist_graph <- load_and_prepare_graph("data/JOURNALIST.json")

```

## Visualising the whole graph

```{r}
set.seed(1234)
```

```{r}
ggraph(filah_graph, 
       layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `type`), 
                  size = 4) +
  geom_node_text(aes(label = type), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

```{r}
ggraph(trout_graph, 
       layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `type`), 
                  size = 4) +
  geom_node_text(aes(label = type), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

```{r}
ggraph(journalist_graph, 
       layout = "fr") +
  geom_edge_link(alpha = 0.3, 
                 colour = "gray") +
  geom_node_point(aes(color = `type`), 
                  size = 4) +
  geom_node_text(aes(label = type), 
                 repel = TRUE, 
                 size = 2.5) +
  theme_void()
```

```{r eval=FALSE}
# Count of node types per dataset
node_summary <- function(graph, label) {
  graph %>%
    activate(nodes) %>%
    count(type, name = "count") %>%
    mutate(dataset = label)
}

nodes_combined <- bind_rows(
  node_summary(filah_graph, "FILAH"),
  node_summary(trout_graph, "TROUT"),
  node_summary(journalist_graph, "Journalist")
)

nodes_combined %>%
  ggplot(aes(x = type, y = count, fill = dataset)) +
  geom_col(position = "dodge") +
  coord_flip() +
  labs(title = "Distribution of Node Types Across Datasets",
       x = "Node Type", y = "Count") +
  theme_minimal()

```
