[
  {
    "objectID": "L2/handson_ex02.html",
    "href": "L2/handson_ex02.html",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "In this chapter, we will explore several ggplot2 extensions for creating elegant and effective statistical graphics. We aim to complete the following by the end of this exercise:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package.\n\n\n\n\n\n\nWe will be using 4 packages in addition to tidyverse:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\n\n\n\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n\n\n\n\nOne of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nhighlighted &lt;- exam_data %&gt;%\n  filter(ID %in% c(\"Student177\", \"Student227\", \"Student305\", \"Student321\"))\n\nggplot(exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.6, color = \"steelblue\") +\n  geom_smooth(method = \"lm\", se = TRUE, linewidth = 0.8, color = \"darkred\") +\n  geom_label_repel(\n    data = highlighted,\n    aes(label = ID),\n    fontface = \"bold\",\n    box.padding = 0.35,\n    point.padding = 0.3,\n    max.overlaps = Inf,\n    color = \"black\",\n    fill = \"white\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(\n    title = \"English vs Maths Scores\",\n    subtitle = \"With linear trend and outlier highlights\",\n    x = \"Maths\",\n    y = \"English\"\n  ) +\n  theme_minimal(base_size = 13)\n\n\n\n\n\n\n\n\n\nMaths and English Score by Gender (Combined)Maths and English Score by Gender (Individual)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more, and see below for some other examples.\n\nExcelFiveThirtyEightTufteWall Street Journal (WSJ)Stata Light\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines.\n\n\n\n\n\n\n\nIt is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\nDistribution of Maths ScoresDistribution of English ScoresEnglish scores versus Maths scores for Primary 3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\n\n\n\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "L2/handson_ex02.html#overview",
    "href": "L2/handson_ex02.html#overview",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "In this chapter, we will explore several ggplot2 extensions for creating elegant and effective statistical graphics. We aim to complete the following by the end of this exercise:\n\ncontrol the placement of annotation on a graph by using functions provided in ggrepel package,\ncreate professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,\nplot composite figure by combining ggplot2 graphs by using patchwork package."
  },
  {
    "objectID": "L2/handson_ex02.html#getting-started",
    "href": "L2/handson_ex02.html#getting-started",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "We will be using 4 packages in addition to tidyverse:\n\nggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.\n\n\n\nggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.\nhrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.\npatchwork: an R package for preparing composite figure created using ggplot2.\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\nThe code chunk below imports exam_data.csv into R environment by using read_csv() function of readr package. readr is one of the tidyverse package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "L2/handson_ex02.html#beyond-ggplot2-annotation-ggrepel",
    "href": "L2/handson_ex02.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "One of the challenge in plotting statistical graph is annotation, especially with large number of data points.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\nggrepel  is an extension of ggplot2 package which provides geoms for ggplot2 to repel overlapping text as in our examples on the right.\nWe simply replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\nhighlighted &lt;- exam_data %&gt;%\n  filter(ID %in% c(\"Student177\", \"Student227\", \"Student305\", \"Student321\"))\n\nggplot(exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point(alpha = 0.6, color = \"steelblue\") +\n  geom_smooth(method = \"lm\", se = TRUE, linewidth = 0.8, color = \"darkred\") +\n  geom_label_repel(\n    data = highlighted,\n    aes(label = ID),\n    fontface = \"bold\",\n    box.padding = 0.35,\n    point.padding = 0.3,\n    max.overlaps = Inf,\n    color = \"black\",\n    fill = \"white\"\n  ) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) +\n  labs(\n    title = \"English vs Maths Scores\",\n    subtitle = \"With linear trend and outlier highlights\",\n    x = \"Maths\",\n    y = \"English\"\n  ) +\n  theme_minimal(base_size = 13)\n\n\n\n\n\n\n\n\n\nMaths and English Score by Gender (Combined)Maths and English Score by Gender (Individual)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRefer to this link to learn more about ggplot2 Themes\n\n\n\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()\n\n\n\n\n\n\n\n\nIt also provides some extra geoms and scales for ‘ggplot2’. Consult this vignette to learn more, and see below for some other examples.\n\nExcelFiveThirtyEightTufteWall Street Journal (WSJ)Stata Light\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n\naxis_title_size argument is used to increase the font size of the axis title to 18,\nbase_size argument is used to increase the default axis label to 15, and\ngrid argument is used to remove the x-axis grid lines."
  },
  {
    "objectID": "L2/handson_ex02.html#beyond-single-graph",
    "href": "L2/handson_ex02.html#beyond-single-graph",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "It is not unusual that multiple graphs are required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, you will learn how to create composite plot by combining multiple graphs. First, let us create three statistical graphics by using the code chunk below.\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\nDistribution of Maths ScoresDistribution of English ScoresEnglish scores versus Maths scores for Primary 3\n\n\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\np1\n\n\n\n\n\n\n\n\n\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\np2\n\n\n\n\n\n\n\n\n\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\nThere are several ggplot2 extension’s functions support the needs to prepare composite figure by combining several graphs such as grid.arrange() of gridExtra package and plot_grid() of cowplot package. In this section, I am going to shared with you an ggplot2 extension called patchwork which is specially designed for combining separate ggplot2 graphs into a single figure.\nPatchwork package has a very simple syntax where we can create layouts super easily. Here’s the general syntax that combines:\n\nTwo-Column Layout using the Plus Sign +.\nParenthesis () to create a subplot group.\nTwo-Row Layout using the Division Sign /\n\n\n\n\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“/” operator to stack two ggplot2 graphs,\n“|” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\nTo learn more about, refer to Plot Assembly.\n\n\n\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below.\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier.\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "L2/handson_ex02.html#reference",
    "href": "L2/handson_ex02.html#reference",
    "title": "Hands-on-Exercise-02",
    "section": "",
    "text": "Patchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "index.html#why-visual-analytics",
    "href": "index.html#why-visual-analytics",
    "title": "Welcome",
    "section": "🎯 Why Visual Analytics?",
    "text": "🎯 Why Visual Analytics?\nIn today’s data-saturated world, the ability to communicate insights visually is just as important as performing the analysis itself. I’m passionate about using data visualisation not just for dashboards, but to solve real-world problems, inform public policy, and shape digital transformation initiatives.\nThis course will deepen my ability to: - Explore and model complex datasets using R and tidyverse. - Apply design principles to create meaningful, interactive visuals. - Build end-to-end visual analytics applications that support decision-making."
  },
  {
    "objectID": "index.html#what-youll-find-here",
    "href": "index.html#what-youll-find-here",
    "title": "Welcome",
    "section": "💡 What You’ll Find Here",
    "text": "💡 What You’ll Find Here\nThis site hosts my coursework, exercises, and take-home projects for ISSS608.\nYou’ll find:\n- 🔧 Hands-on R projects and dashboards\n- 🧪 In-class projects with visual design\n- 🏠 Take-home exercises with exploratory storytelling\n- 🚀 A final project built with Shiny to demonstrate practical application"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "👋 Hello, I’m Lau Jia Yi\nWelcome to my Visual Analytics learning journey!\nI’m currently a Finance Systems & Digitalisation Manager at SMRT Corporation Ltd, with over 8 years of experience in finance, audit, and enterprise transformation.\nMy professional background includes:\n- 5 years as a Finance Business Partner with a focus on public transport operations and data-driven planning.\n- 3 years as an auditor at Ernst & Young, specializing in financial compliance and controls.\n- An accountancy graduate with strong grounding in strategic finance and process improvement.\nAs part of my Master of IT in Business journey at Singapore Management University, I’m enrolled in ISSS608 – Visual Analytics and Applications, a course designed to harness the power of data storytelling, exploratory analysis, and interactive design using tools like R, Tableau, and Shiny."
  },
  {
    "objectID": "L1/handson_ex01.html",
    "href": "L1/handson_ex01.html",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "In this first chapter of ISSS608 of Visual Analytics & Applications, I would explore the basic principles and essential components of ggplot2 by hands-on experience on using these components to plot statistical graphics. The principle of Layered Grammar of Graphics will be applied to create elegant and yet functional statistical graphics.\n\n\n\n\n\nAs ggplot will mainly be used in this exercise, we would need to load the tidyverse library.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThe dataset of a year end examination grades of a cohort of primary 3 students from a local school is used.\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\nThe above attributes describe the data set, with categorical attributes being ID, CLASS, GENDER and RACE and continuous attributes being ENGLISH, MATHS and SCIENCE.\n\n\n\n\n“ggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.”\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nDespite the additional syntax required for ggplot2, the importance of learning ggplot2 is best explained by Hadley Wickham:\n\n\n\n\nThe transferrable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\nYes, ggplot2 does require a specific arrangement of data, but you’re going to have to understand that pretty soon anyway — otherwise, data transformation and modelling are going to be tough.\n\nHadley Wickham\n\n\n\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n\n\n\n\nCalling the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot()` initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify().\n\n\n\n\n\n\nThe aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label.\n\n\n\n\n\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, binwidth = 2)\n\n\n\n\n\n\n\n\nAs the y scale is not very useful and misleading, we will turn it off using scale_y_continous() and change the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") \n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\nAlpha outside aes()Alpha inside aes()\n\n\n\nggplot(exam_data, aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\", alpha = 0.6) +\n  labs(title = \"Alpha Outside aes()\",\n       subtitle = \"Cleaner legend, same transparency\")\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data, aes(x = MATHS, fill = GENDER, alpha = 0.6)) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  labs(title = \"Alpha Inside aes()\",\n       subtitle = \"Legend includes alpha mapping (even though it's constant)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSetting alpha outside of aes() will not include a redundant legend.\n\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n\n\n\n\n\n\n\n\n\n\n\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess, it can be overriden using the method argument as below.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\nlibrary(ggpmisc)\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", linewidth = 0.5) +\n  stat_poly_eq(\n    formula = y ~ x,\n    aes(label = paste(..eq.label.., ..rr.label.., sep = \"~~~\")),\n    parse = TRUE\n  )\n\n\n\n\n\n\n\n\n\n\n\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\n\nThe Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out). \n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped. \n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot). \n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "L1/handson_ex01.html#learning-outcome",
    "href": "L1/handson_ex01.html#learning-outcome",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "In this first chapter of ISSS608 of Visual Analytics & Applications, I would explore the basic principles and essential components of ggplot2 by hands-on experience on using these components to plot statistical graphics. The principle of Layered Grammar of Graphics will be applied to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "L1/handson_ex01.html#getting-started",
    "href": "L1/handson_ex01.html#getting-started",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "As ggplot will mainly be used in this exercise, we would need to load the tidyverse library.\n\npacman::p_load(tidyverse)\n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\", show_col_types = FALSE)\n\nThe dataset of a year end examination grades of a cohort of primary 3 students from a local school is used.\n\nhead(exam_data)\n\n# A tibble: 6 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25\n6 Student306 3I    Female Malay        31    16      16\n\n\nThe above attributes describe the data set, with categorical attributes being ID, CLASS, GENDER and RACE and continuous attributes being ENGLISH, MATHS and SCIENCE."
  },
  {
    "objectID": "L1/handson_ex01.html#introducing-ggplot",
    "href": "L1/handson_ex01.html#introducing-ggplot",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "“ggplot2 is a system for declaratively creating graphics, based on The Grammar of Graphics. You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.”\n\n\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\nDespite the additional syntax required for ggplot2, the importance of learning ggplot2 is best explained by Hadley Wickham:"
  },
  {
    "objectID": "L1/handson_ex01.html#thinking-in-ggplot2",
    "href": "L1/handson_ex01.html#thinking-in-ggplot2",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "The transferrable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.\nYes, ggplot2 does require a specific arrangement of data, but you’re going to have to understand that pretty soon anyway — otherwise, data transformation and modelling are going to be tough.\n\nHadley Wickham"
  },
  {
    "objectID": "L1/handson_ex01.html#grammar-of-graphics",
    "href": "L1/handson_ex01.html#grammar-of-graphics",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "Grammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It was introduced by Leland Wilkinson (1999) Grammar of Graphics, Springer. The grammar of graphics is an answer to a question:\n\nWhat is a statistical graphic?\n\nIn the nutshell, Grammar of Graphics defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\nThere are two principles in Grammar of Graphics, they are:\n\nGraphics = distinct layers of grammatical elements\nMeaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978). It also provides a strong foundation for understanding a diverse range of graphics. Furthermore, it may also help guide us on what a well-formed or correct graphic looks like, but there will still be many grammatically correct but nonsensical graphics.\n\n\nggplot2 is an implementation of Leland Wilkinson’s Grammar of Graphics. Figure below shows the seven grammars of ggplot2.\n\nReference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.\nA short description of each building block are as follows:\n\nData: The dataset being plotted.\nAesthetics take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\nGeometrics: The visual elements used for our data, such as point, bar or line.\nFacets split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\nStatistics, statiscal transformations that summarise data (e.g. mean, confidence intervals).\nCoordinate systems define the plane on which data are mapped on the graphic.\nThemes modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background."
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "Calling the ggplot() function using the code chunk below.\n\nggplot(data=exam_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA blank canvas appears.\nggplot()` initializes a ggplot object.\nThe data argument defines the dataset to be used for plotting.\nIf the dataset is not already a data.frame, it will be converted to one by fortify()."
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-aesthetic-mappings",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "The aesthetic mappings take attributes of the data and and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call (in later part of this lesson, you will see that each geom layer can have its own aes specification)\nCode chunk below adds the aesthetic element into the plot.\n\nggplot(data=exam_data, \n       aes(x= MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nggplot includes the x-axis and the axis’s label."
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "Geometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\n\n\nA plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the + operator.\nFor complete list, please refer to here.\n\n\n\nThe code chunk below plots a bar chart by using geom_bar().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\nIn the code chunk below, geom_dotplot() of ggplot2 is used to plot a dot plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5, binwidth = 2)\n\n\n\n\n\n\n\n\nAs the y scale is not very useful and misleading, we will turn it off using scale_y_continous() and change the binwidth to 2.5.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in MATHS field of exam_data.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n\n\n\n\n\n\n\n\n\nIn the code chunk below,\n\nbins argument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\") \n\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n\n\n\n\nAlpha outside aes()Alpha inside aes()\n\n\n\nggplot(exam_data, aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\", alpha = 0.6) +\n  labs(title = \"Alpha Outside aes()\",\n       subtitle = \"Cleaner legend, same transparency\")\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data, aes(x = MATHS, fill = GENDER, alpha = 0.6)) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  labs(title = \"Alpha Inside aes()\",\n       subtitle = \"Legend includes alpha mapping (even though it's constant)\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSetting alpha outside of aes() will not include a redundant legend.\n\n\n\n\n\n\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "The Statistics functions statistically transform data, usually as some form of summary. For example:\n\nfrequency of values of a variable (bar graph)\n\na mean\na confidence limit\n\nThere are two ways to use these functions:\n\nadd a stat_() function and override the default geom, or\nadd a geom_() function and override the default stat.\n\n\n\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adds mean values by using stat_summary() function and overriding the default geom.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n\nThe code chunk below adding mean values by using geom_() function and overriding the default stat.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n\nIn the code chunk below, geom_smooth() is used to plot a best fit curve on the scatterplot.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default method used is loess, it can be overriden using the method argument as below.\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n\n\n\n\n\n\n\n\n\nlibrary(ggpmisc)\n\n\nggplot(data = exam_data, \n       aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = \"loess\", linewidth = 0.5) +\n  stat_poly_eq(\n    formula = y ~ x,\n    aes(label = paste(..eq.label.., ..rr.label.., sep = \"~~~\")),\n    parse = TRUE\n  )"
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: facet_grid() and facet_wrap.\n\n\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "L1/handson_ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on-Exercise-01",
    "section": "",
    "text": "The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out). \n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped. \n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot). \n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.\n\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nThe scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "T1/takehome_ex01.html",
    "href": "T1/takehome_ex01.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts.\n\n\n\n\n\n\nThe following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x, RColorBrewer, ggdist)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n# === STEP 1: OVERALL PLOT ===\n\n# Prepare overall dataset\noverall_df &lt;- df %&gt;%\n  filter(!is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Compute peak by Region\noverall_peaks &lt;- overall_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    d = list(density(Age_Num)),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = d$x[which.max(d$y)],\n    label = paste0(Region, \": Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n# Combine labels\noverall_annotation &lt;- paste(overall_peaks$label, collapse = \"\\n\")\n\n# Overall plot\noverall_plot &lt;- ggplot(overall_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\", linewidth = 0.7) +\n  annotate(\"text\", x = 5, y = Inf, vjust = 1.2,\n           label = overall_annotation, hjust = 0, size = 3.5, fontface = \"italic\") +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Distribution (2024): Overall\",\n    subtitle = \"Density by Region with Y-axis scaled per chart\",\n    x = \"Age\", y = \"Relative Density\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"right\"\n  )\n\n# === STEP 2: REGION FUNCTION ===\n\ncompute_top3_peaks &lt;- function(region_df) {\n  region_df %&gt;%\n    group_by(Planning_Area) %&gt;%\n    summarise(d = list(density(Age_Num)), .groups = \"drop\") %&gt;%\n    rowwise() %&gt;%\n    mutate(\n      peak_x = d$x[which.max(d$y)],\n      peak_y = max(d$y)\n    ) %&gt;%\n    ungroup() %&gt;%\n    slice_max(order_by = peak_y, n = 3) %&gt;%\n    mutate(label = Planning_Area) %&gt;%\n    select(Planning_Area, peak_x, peak_y, label)\n}\n\nmake_region_plot &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- df %&gt;%\n    filter(Region == region_name, !is.na(Age_Num)) %&gt;%\n    group_by(Planning_Area, Age_Num) %&gt;%\n    summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n    uncount(weights = Population) %&gt;%\n    mutate(Planning_Area = factor(Planning_Area))\n\n  # Colors\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  base_colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(base_colors) &lt;- levels(region_df$Planning_Area)\n\n  # Top 3 peak labels\n  peak_labels &lt;- compute_top3_peaks(region_df)\n\n  ggplot(region_df, aes(x = Age_Num, fill = Planning_Area, color = Planning_Area)) +\n    geom_density(alpha = 0.5, linewidth = 0.7) +\n    ggrepel::geom_label_repel(\n      data = peak_labels,\n      aes(x = peak_x, y = peak_y, label = label, fill = Planning_Area),\n      color = \"black\", size = 3,\n      box.padding = 0.3, segment.color = \"grey50\", show.legend = FALSE\n    ) +\n    scale_fill_manual(values = base_colors, guide = guide_legend(override.aes = list(alpha = 1))) +\n    scale_color_manual(values = base_colors, guide = \"none\") +\n    scale_x_continuous(breaks = seq(0, 90, 10)) +\n    labs(\n      title = paste(\"Age Distribution –\", region_name),\n      x = \"Age\", y = \"Relative Density\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"right\"\n    )\n}\n\n# === STEP 3: Region Plots ===\n\ncentral_plot     &lt;- make_region_plot(\"Central\", \"Set2\")\neast_plot        &lt;- make_region_plot(\"East\", \"Pastel1\")\nnorth_plot       &lt;- make_region_plot(\"North\", \"Accent\")\nnorth_east_plot  &lt;- make_region_plot(\"North-East\", \"Dark2\")\nwest_plot        &lt;- make_region_plot(\"West\", \"Set3\")\n\n# === STEP 4: Assemble Layout ===\n\nfinal_plot &lt;- \n  overall_plot /\n  (central_plot | east_plot) /\n  (north_plot | north_east_plot) /\n  (west_plot + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Age Distribution (2024): Overall and by Region\",\n    subtitle = \"Top: Overall with regional overlay | Below: Each region shows its planning areas (Top 3 labelled)\\nY-axis scales independently per chart\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 5: Render ===\nfinal_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nY-Axes are not unified across the charts\n\n\n\nY-Axes are not unified across the charts to maintain relative comparison of regions and planning areas within a chart, please do not compare across charts. The intent of individual facets are to provide more context within each region.\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\n\n\n\n\n\n\n# === STEP 1: Prepare Population-weighted Data ===\nviolin_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  uncount(weights = Population) %&gt;%\n  mutate(Planning_Area = factor(Planning_Area))\n\n# === STEP 2: Overall Violin + Boxplot ===\noverall_violin &lt;- ggplot(violin_df, aes(x = Region, y = Age_Num, fill = Region)) +\n  geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.6) +\n  geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Violin + Boxplot – Age Distribution (2024): Overall\",\n    subtitle = \"Population-weighted by Region\",\n    x = \"Region\", y = \"Age\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"none\"\n  )\n\n# === STEP 3: Region Function – Violin + Boxplot ===\nmake_violin_region &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- violin_df %&gt;%\n    filter(Region == region_name)\n\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(colors) &lt;- levels(region_df$Planning_Area)\n\n  ggplot(region_df, aes(x = Planning_Area, y = Age_Num, fill = Planning_Area)) +\n    geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.5) +\n    geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8) +\n    scale_fill_manual(values = colors) +\n    labs(\n      title = paste(\"Violin + Boxplot –\", region_name),\n      x = \"Planning Area\", y = \"Age\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      axis.text.x = element_text(angle = 90, hjust = 1),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"none\"\n    )\n}\n\n# === STEP 4: Region Plots ===\ncentral_violin     &lt;- make_violin_region(\"Central\", \"Set2\")\neast_violin        &lt;- make_violin_region(\"East\", \"Pastel1\")\nnorth_violin       &lt;- make_violin_region(\"North\", \"Accent\")\nnorth_east_violin  &lt;- make_violin_region(\"North-East\", \"Dark2\")\nwest_violin        &lt;- make_violin_region(\"West\", \"Set3\")\n\n# === STEP 5: Layout ===\nviolin_boxplot_grid &lt;- \n  overall_violin /\n  (central_violin | east_violin) /\n  (north_violin | north_east_violin) /\n  (west_violin + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Violin + Boxplot of Age Distribution (2024)\",\n    subtitle = \"Top: Overall by Region | Below: By Planning Area in each Region (Population-weighted)\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 6: Render ===\nviolin_boxplot_grid\n\n\n\n\n\n\n\n\n\n# === STEP 1: Load Required Libraries ===\npacman::p_load(tidyverse, patchwork, ggrepel, RColorBrewer)\n\n# === STEP 2: Prepare Population-weighted Data ===\nviolin_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  uncount(weights = Population) %&gt;%\n  mutate(Planning_Area = factor(Planning_Area))\n\n# === STEP 3: Define Region Base Colors ===\nregion_base_colors &lt;- c(\n  \"Central\"     = \"#66C2A5\",  # teal\n  \"East\"        = \"#FC8D62\",  # orange\n  \"North\"       = \"#8DA0CB\",  # blue\n  \"North-East\"  = \"#E78AC3\",  # pink\n  \"West\"        = \"#A6D854\"   # green\n)\n\n# === STEP 4: Compute Median Age Helper ===\nget_median_labels &lt;- function(data, group_col) {\n  data %&gt;%\n    group_by(across(all_of(group_col))) %&gt;%\n    summarise(median_age = median(Age_Num), .groups = \"drop\") %&gt;%\n    mutate(label = round(median_age, 1))\n}\n\n# === STEP 5: Overall Violin + Boxplot ===\nregion_medians &lt;- get_median_labels(violin_df, \"Region\")\n\noverall_violin &lt;- ggplot(violin_df, aes(x = Region, y = Age_Num, fill = Region)) +\n  geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.6) +\n  geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.85, color = \"black\") +\n  geom_text(\n    data = region_medians,\n    aes(x = Region, y = median_age, label = label),\n    inherit.aes = FALSE,\n    size = 4, fontface = \"italic\", vjust = -0.8\n  ) +\n  scale_fill_manual(values = region_base_colors) +\n  labs(\n    title = \"Violin + Boxplot – Age Distribution (2024): Overall\",\n    subtitle = \"Population-weighted by Region (Median age labeled)\",\n    x = \"Region\", y = \"Age\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"none\"\n  )\n\n# === STEP 6: Region Function – Violin + Boxplot by Planning Area ===\nmake_violin_region &lt;- function(region_name, base_color) {\n  region_df &lt;- violin_df %&gt;% filter(Region == region_name)\n\n  # Compute medians and sort Planning Areas in descending order\n  pa_medians &lt;- get_median_labels(region_df, \"Planning_Area\") %&gt;%\n    arrange(desc(median_age))\n\n  # Reorder factors by descending median age\n  region_df$Planning_Area &lt;- factor(region_df$Planning_Area,\n                                    levels = pa_medians$Planning_Area)\n  pa_medians$Planning_Area &lt;- factor(pa_medians$Planning_Area,\n                                     levels = pa_medians$Planning_Area)\n\n  # Reverse gradient (darkest color left)\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  color_shades &lt;- colorRampPalette(c(base_color, \"white\"))(n_colors)\n  color_shades &lt;- rev(color_shades)  # Darkest on the left\n  names(color_shades) &lt;- levels(region_df$Planning_Area)\n\n  ggplot(region_df, aes(x = Planning_Area, y = Age_Num, fill = Planning_Area)) +\n    geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.5) +\n    geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8, color = \"black\") +\n    geom_text(\n      data = pa_medians,\n      aes(x = Planning_Area, y = median_age, label = label),\n      inherit.aes = FALSE, size = 3.5, vjust = -0.8, fontface = \"italic\"\n    ) +\n    scale_fill_manual(values = color_shades) +\n    labs(\n      title = paste(\"Violin + Boxplot –\", region_name),\n      x = \"Planning Area\", y = \"Age\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      axis.text.x = element_text(angle = 90, hjust = 1, size = 7),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"none\"\n    )\n}\n\n# === STEP 7: Region Violin Plots ===\ncentral_violin     &lt;- make_violin_region(\"Central\", region_base_colors[\"Central\"])\neast_violin        &lt;- make_violin_region(\"East\", region_base_colors[\"East\"])\nnorth_violin       &lt;- make_violin_region(\"North\", region_base_colors[\"North\"])\nnorth_east_violin  &lt;- make_violin_region(\"North-East\", region_base_colors[\"North-East\"])\nwest_violin        &lt;- make_violin_region(\"West\", region_base_colors[\"West\"])\n\n# === STEP 8: Assemble Layout ===\nviolin_boxplot_grid &lt;- \n  overall_violin /\n  (central_violin | east_violin) /\n  (north_violin | north_east_violin) /\n  (west_violin + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1.2, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Violin + Boxplot of Age Distribution (2024)\",\n    subtitle = \"Top: Overall by Region | Below: Planning Areas sorted by Median Age (Descending)\\nColor fades left to right by age rank\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 9: Render ===\nviolin_boxplot_grid"
  },
  {
    "objectID": "T1/takehome_ex01.html#introduction",
    "href": "T1/takehome_ex01.html#introduction",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts."
  },
  {
    "objectID": "T1/takehome_ex01.html#loading-r-packages-and-dataset",
    "href": "T1/takehome_ex01.html#loading-r-packages-and-dataset",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x, RColorBrewer, ggdist)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …"
  },
  {
    "objectID": "T1/takehome_ex01.html#visualising-the-singapore-population-landscape",
    "href": "T1/takehome_ex01.html#visualising-the-singapore-population-landscape",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "This article would focus on the top n% of Singapore\n\npopulation_summary &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(\n    Population = sum(Population),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    Percent = round(Population / sum(Population) * 100, 2)\n  ) %&gt;%\n  arrange(desc(Population)) %&gt;%\n  mutate(\n    CumulativePercent = round(cumsum(Percent), 2),\n    `S/N` = row_number()\n  ) %&gt;%\n  select(`S/N`, Planning_Area, Population, Percent, CumulativePercent)\n\nkable(population_summary, \n      caption = \"Population and Cumulative Percentage by Planning Area\")\n\n\nPopulation and Cumulative Percentage by Planning Area\n\n\nS/N\nPlanning_Area\nPopulation\nPercent\nCumulativePercent\n\n\n\n\n1\nTampines\n284950\n6.79\n6.79\n\n\n2\nBedok\n277660\n6.62\n13.41\n\n\n3\nSengkang\n265550\n6.33\n19.74\n\n\n4\nJurong West\n257910\n6.15\n25.89\n\n\n5\nWoodlands\n255510\n6.09\n31.98\n\n\n6\nYishun\n230320\n5.49\n37.47\n\n\n7\nHougang\n228780\n5.46\n42.93\n\n\n8\nPunggol\n199880\n4.77\n47.70\n\n\n9\nChoa Chu Kang\n190640\n4.55\n52.25\n\n\n10\nBukit Batok\n168390\n4.02\n56.27\n\n\n11\nAng Mo Kio\n160450\n3.83\n60.10\n\n\n12\nBukit Merah\n149390\n3.56\n63.66\n\n\n13\nPasir Ris\n145480\n3.47\n67.13\n\n\n14\nToa Payoh\n140030\n3.34\n70.47\n\n\n15\nBukit Panjang\n138730\n3.31\n73.78\n\n\n16\nSerangoon\n118250\n2.82\n76.60\n\n\n17\nGeylang\n116820\n2.79\n79.39\n\n\n18\nSembawang\n110670\n2.64\n82.03\n\n\n19\nClementi\n102960\n2.46\n84.49\n\n\n20\nQueenstown\n102040\n2.43\n86.92\n\n\n21\nKallang\n101190\n2.41\n89.33\n\n\n22\nBishan\n88210\n2.10\n91.43\n\n\n23\nBukit Timah\n84250\n2.01\n93.44\n\n\n24\nJurong East\n74590\n1.78\n95.22\n\n\n25\nNovena\n52150\n1.24\n96.46\n\n\n26\nMarine Parade\n46950\n1.12\n97.58\n\n\n27\nTanglin\n24540\n0.59\n98.17\n\n\n28\nOutram\n16740\n0.40\n98.57\n\n\n29\nRochor\n13040\n0.31\n98.88\n\n\n30\nRiver Valley\n11970\n0.29\n99.17\n\n\n31\nNewton\n9910\n0.24\n99.41\n\n\n32\nTengah\n7940\n0.19\n99.60\n\n\n33\nSingapore River\n4200\n0.10\n99.70\n\n\n34\nDowntown Core\n4170\n0.10\n99.80\n\n\n35\nSouthern Islands\n2580\n0.06\n99.86\n\n\n36\nMandai\n2130\n0.05\n99.91\n\n\n37\nChangi\n1830\n0.04\n99.95\n\n\n38\nOrchard\n870\n0.02\n99.97\n\n\n39\nSungei Kadut\n600\n0.01\n99.98\n\n\n40\nWestern Water Catchment\n590\n0.01\n99.99\n\n\n41\nMuseum\n530\n0.01\n100.00\n\n\n42\nSeletar\n140\n0.00\n100.00\n\n\n43\nBoon Lay\n0\n0.00\n100.00\n\n\n44\nCentral Water Catchment\n0\n0.00\n100.00\n\n\n45\nChangi Bay\n0\n0.00\n100.00\n\n\n46\nLim Chu Kang\n0\n0.00\n100.00\n\n\n47\nMarina East\n0\n0.00\n100.00\n\n\n48\nMarina South\n0\n0.00\n100.00\n\n\n49\nNorth-Eastern Islands\n0\n0.00\n100.00\n\n\n50\nPaya Lebar\n0\n0.00\n100.00\n\n\n51\nPioneer\n0\n0.00\n100.00\n\n\n52\nSimpang\n0\n0.00\n100.00\n\n\n53\nStraits View\n0\n0.00\n100.00\n\n\n54\nTuas\n0\n0.00\n100.00\n\n\n55\nWestern Islands\n0\n0.00\n100.00\n\n\n\n\n\n\n\nTop 30 Planning Areas by Age Group Distribution\n\ntop_n &lt;- 30\n\ntop_areas &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Total = sum(Population), .groups = \"drop\") %&gt;%\n  slice_max(Total, n = top_n) %&gt;%\n  pull(Planning_Area)\n\ndf %&gt;%\n  filter(Planning_Area %in% top_areas) %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  ggplot(aes(x = reorder(Planning_Area, -Population), y = Population, fill = AgeGroup)) +\n  geom_col() +\n  scale_y_continuous(labels = scales::label_comma()) +\n  labs(title = paste(\"Top\", top_n, \"Planning Areas by Age Group Distribution\"),\n       x = \"Planning Area\", y = \"Population\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 9),\n    plot.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\nLoading the Master Plan 2014 Planning Area Boundary shapefile obtained from data.gov.sg.\n\nplanning_sf &lt;- st_read(\"data/MP14/MP14_PLNG_AREA_WEB_PL.shp\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `C:\\Users\\jia_y\\OneDrive - Singapore Management University\\Semester 6\\ISSS608 VAA\\jylau91\\ISSS608-VAA\\T1\\data\\MP14\\MP14_PLNG_AREA_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nSummarise population by Planning Area variabe\n\npop_summary &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\")\n\nJoin population data with shapefile, converting planning area in the population dataset to upper case to match the shapefile’s planning area naming convention\n\nunique(planning_sf$PLN_AREA_N)\n\n [1] \"BISHAN\"                  \"BUKIT BATOK\"            \n [3] \"BUKIT MERAH\"             \"BUKIT PANJANG\"          \n [5] \"BUKIT TIMAH\"             \"CENTRAL WATER CATCHMENT\"\n [7] \"CHANGI\"                  \"CHANGI BAY\"             \n [9] \"CHOA CHU KANG\"           \"CLEMENTI\"               \n[11] \"GEYLANG\"                 \"NOVENA\"                 \n[13] \"PASIR RIS\"               \"PAYA LEBAR\"             \n[15] \"SELETAR\"                 \"SEMBAWANG\"              \n[17] \"BEDOK\"                   \"BOON LAY\"               \n[19] \"SENGKANG\"                \"SERANGOON\"              \n[21] \"ANG MO KIO\"              \"TENGAH\"                 \n[23] \"TOA PAYOH\"               \"WESTERN WATER CATCHMENT\"\n[25] \"YISHUN\"                  \"DOWNTOWN CORE\"          \n[27] \"MARINA EAST\"             \"NEWTON\"                 \n[29] \"ORCHARD\"                 \"WOODLANDS\"              \n[31] \"MARINA SOUTH\"            \"MUSEUM\"                 \n[33] \"HOUGANG\"                 \"JURONG EAST\"            \n[35] \"LIM CHU KANG\"            \"MANDAI\"                 \n[37] \"MARINE PARADE\"           \"NORTH-EASTERN ISLANDS\"  \n[39] \"PIONEER\"                 \"PUNGGOL\"                \n[41] \"QUEENSTOWN\"              \"SOUTHERN ISLANDS\"       \n[43] \"TUAS\"                    \"JURONG WEST\"            \n[45] \"KALLANG\"                 \"SIMPANG\"                \n[47] \"SUNGEI KADUT\"            \"TAMPINES\"               \n[49] \"WESTERN ISLANDS\"         \"TANGLIN\"                \n[51] \"OUTRAM\"                  \"RIVER VALLEY\"           \n[53] \"ROCHOR\"                  \"SINGAPORE RIVER\"        \n[55] \"STRAITS VIEW\"           \n\nunique(df$Planning_Area)\n\n [1] \"Ang Mo Kio\"              \"Bedok\"                  \n [3] \"Bishan\"                  \"Boon Lay\"               \n [5] \"Bukit Batok\"             \"Bukit Merah\"            \n [7] \"Bukit Panjang\"           \"Bukit Timah\"            \n [9] \"Central Water Catchment\" \"Changi\"                 \n[11] \"Changi Bay\"              \"Choa Chu Kang\"          \n[13] \"Clementi\"                \"Downtown Core\"          \n[15] \"Geylang\"                 \"Hougang\"                \n[17] \"Jurong East\"             \"Jurong West\"            \n[19] \"Kallang\"                 \"Lim Chu Kang\"           \n[21] \"Mandai\"                  \"Marina East\"            \n[23] \"Marina South\"            \"Marine Parade\"          \n[25] \"Museum\"                  \"Newton\"                 \n[27] \"North-Eastern Islands\"   \"Novena\"                 \n[29] \"Orchard\"                 \"Outram\"                 \n[31] \"Pasir Ris\"               \"Paya Lebar\"             \n[33] \"Pioneer\"                 \"Punggol\"                \n[35] \"Queenstown\"              \"River Valley\"           \n[37] \"Rochor\"                  \"Seletar\"                \n[39] \"Sembawang\"               \"Sengkang\"               \n[41] \"Serangoon\"               \"Simpang\"                \n[43] \"Singapore River\"         \"Southern Islands\"       \n[45] \"Straits View\"            \"Sungei Kadut\"           \n[47] \"Tampines\"                \"Tanglin\"                \n[49] \"Tengah\"                  \"Toa Payoh\"              \n[51] \"Tuas\"                    \"Western Islands\"        \n[53] \"Western Water Catchment\" \"Woodlands\"              \n[55] \"Yishun\"                 \n\n\n\nplanning_sf &lt;- planning_sf %&gt;%\n  mutate(Area_km2 = as.numeric(st_area(geometry)) / 1e6)  # from m² to km²\n\n\nplanning_map &lt;- planning_sf %&gt;%\n  mutate(PLN_AREA_N = toupper(PLN_AREA_N)) %&gt;%\n  left_join(\n    pop_summary %&gt;% mutate(Planning_Area = toupper(Planning_Area)),\n    by = c(\"PLN_AREA_N\" = \"Planning_Area\")\n  )\n\n\npop_by_area_age &lt;- df %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Planning_Area = toupper(Planning_Area))  # Match shapefile casing\n\n\nmap_data &lt;- planning_sf %&gt;%\n  select(PLN_AREA_N, geometry, Area_km2) %&gt;%\n  right_join(pop_by_area_age, by = c(\"PLN_AREA_N\" = \"Planning_Area\")) %&gt;%\n  mutate(\n    PopDensity = Population / Area_km2\n  )\n\nMaximum population density by planning area is Choa Chu Kang at 18,349 / kmsq.\n\nmax_density_area &lt;- map_data %&gt;%\n  filter(PopDensity == max(PopDensity, na.rm = TRUE)) %&gt;%\n  select(PLN_AREA_N, PopDensity) %&gt;%\n  distinct()\n\nmax_density_area\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 16798.7 ymin: 39008.54 xmax: 19978.59 ymax: 43037.41\nProjected CRS: SVY21\n     PLN_AREA_N PopDensity                       geometry\n1 CHOA CHU KANG   18746.85 MULTIPOLYGON (((18349.06 43...\n\n\nFor proper scaling, we are limitting the population density at 20,000.\n\nmap_data &lt;- map_data %&gt;%\n  mutate(PopDensity_Capped = pmin(PopDensity, 20000))\n\nPop density and average age calculation\nCalculate average age by Planning Area\n\navg_age &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Avg_Age = weighted.mean(Age_Num, w = Population), .groups = \"drop\") %&gt;%\n  mutate(Planning_Area = toupper(Planning_Area))\n\nJoin with map data and create scaled metric\n\nmap_data &lt;- map_data %&gt;%\n  left_join(avg_age, by = c(\"PLN_AREA_N\" = \"Planning_Area\")) %&gt;%\n  mutate(\n    # Scale both to 0–1\n    PopDensity_Scaled = PopDensity_Capped / max(PopDensity_Capped, na.rm = TRUE),\n    Avg_Age_Scaled = Avg_Age / max(Avg_Age, na.rm = TRUE),\n    \n    # Composite score: equal weight to both\n    DensityAgeIndex = (PopDensity_Scaled + Avg_Age_Scaled) / 2\n  )\n\n\nmap_index &lt;- map_data %&gt;%\n  group_by(PLN_AREA_N) %&gt;%\n  summarise(\n    DensityAgeIndex = mean(DensityAgeIndex, na.rm = TRUE),\n    geometry = st_union(geometry)\n  )\n\n\n# Get centroids and extract coordinates\ntop5_labels &lt;- map_index %&gt;%\n  slice_max(DensityAgeIndex, n = 5) %&gt;%\n  mutate(centroid = st_centroid(geometry)) %&gt;%\n  mutate(\n    lon = st_coordinates(centroid)[, 1],\n    lat = st_coordinates(centroid)[, 2]\n  )\n\n# Plot with improved label layout\nggplot(map_index) +\n  geom_sf(aes(fill = DensityAgeIndex), color = \"black\", size = 0.2) +\n  geom_label_repel(\n    data = top5_labels,\n    aes(\n      x = lon,\n      y = lat,\n      label = paste0(PLN_AREA_N, \"\\n\", scales::percent(DensityAgeIndex, accuracy = 1))\n    ),\n    size = 3,\n    fontface = \"bold\",\n    nudge_x = 2000,  # nudging right\n    nudge_y = 2000,  # nudging up\n    hjust = 0,       # align left\n    vjust = 1,       # align top\n    box.padding = 0.6,\n    point.padding = 0.5,\n    segment.color = \"black\",\n    segment.size = 0.3,\n    min.segment.length = 0\n  ) +\n  scale_fill_gradientn(\n    colours = c(\"#4575b4\", \"#ffffbf\", \"#d73027\"),\n    limits = c(0, 1),\n    breaks = seq(0, 1, by = 0.1),\n    labels = scales::label_percent(accuracy = 1)\n  ) +\n  labs(\n    title = \"Composite Density-Age Index by Planning Area (2024)\",\n    fill = \"Density-Age Index\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8)\n  )\n\n\n\n\n\n\n\n\nDocument: - top 5, back by facts - possible policy / implications / healthcare / accessibility - note areas in grey - why 0 etc.\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num)\n\n# Prepare the data for ggplot2\nplot_df &lt;- df %&gt;%\n  # Group ages by 5-year intervals\n  mutate(AgeGroup = cut(Age_Num,\n                       breaks = if(max_age &gt; 90) {c(seq(0, 85, by = 5), 90, max_age + 1)}  # added 1 to max age\n                                  else {c(seq(0, 85, by = 5), max_age + 1)},\n                       right = FALSE,\n                       labels = if(max_age &gt; 90) {c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"Beyond 90\")}\n                                  else {c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"Beyond 90\")})) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population)) %&gt;%\n  ungroup() %&gt;%\n  mutate(Population = ifelse(Sex == \"Males\", -Population, Population)) %&gt;%\n  mutate(PopulationAbs = abs(Population))  # Create absolute value for labels\n\n# Create the population pyramid using ggplot2\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.95, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Population Pyramid for Singapore (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE)) +\n  scale_fill_manual(values = c(\"Females\" = \"#FFB6C1\", \"Males\" = \"#87CEFA\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0)\n  )\n\n\n\n\n\n\n\n\n\n\n\nFinally, we examine Singapore’s overall population structure using a population pyramid.\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num)\n\n# Prepare the data for ggplot2\nplot_df &lt;- df %&gt;%\n  # Group ages by 5-year intervals\n  mutate(AgeGroup = cut(Age_Num,\n                       breaks = if (max_age &gt; 90) {\n                         c(seq(0, 85, by = 5), 90, max_age + 1)\n                       } else {\n                         c(seq(0, 85, by = 5), max_age + 1)\n                       },\n                       right = FALSE,\n                       labels = if (max_age &gt; 90) {\n                         c(\n                           paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                           \"Beyond 90\"\n                         )\n                       } else {\n                         c(\n                           paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                           \"Beyond 90\"\n                         )\n                       })) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population)) %&gt;%\n  ungroup() %&gt;%\n  mutate(Population = ifelse(Sex == \"Males\", -Population, Population)) %&gt;%\n  mutate(PopulationAbs = abs(Population)) # Create absolute value for labels\n\n# Create the population pyramid using ggplot2\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(labels = function(x)\n    format(abs(x), big.mark = \",\", scientific = FALSE)) +\n  scale_fill_manual(values = c(\"Females\" = \"#FFB6C1\", \"Males\" = \"#87CEFA\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0)\n  )"
  },
  {
    "objectID": "L3/handson_ex03.html",
    "href": "L3/handson_ex03.html",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "In this exercise, we will create interactive data visualisations by using functions provided by ggiraph and plotlyr packages.\n\n\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure.\n\n\n\n\nThe code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page.\n\n\n\n\nBy hovering the mouse pointer on a data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID, CLASS and GENDER fields into the newly created field. The tooltip field is then called under geom_dotplot_interactive as an aesthetic mapping with the tooltip argument.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering with CSS declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nNotice that the background color of the tooltip is now white and font color is black, whereas the default tooltip has a black background color with white font color.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = GENDER, \n        data_id = GENDER),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n\n\n\n\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\n\n\n\n\nCrosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\n\n\n\n\n\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "L3/handson_ex03.html#learning-outcome",
    "href": "L3/handson_ex03.html#learning-outcome",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "In this exercise, we will create interactive data visualisations by using functions provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "L3/handson_ex03.html#loading-packages",
    "href": "L3/handson_ex03.html#loading-packages",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse) \n\n\nggiraph for making ‘ggplot’ graphics interactive.\nplotly, R library for plotting interactive statistical graphs.\nDT provides an R interface to the JavaScript library DataTables that create interactive table on html page.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\npatchwork for combining multiple ggplot2 graphs into one figure."
  },
  {
    "objectID": "L3/handson_ex03.html#importing-data",
    "href": "L3/handson_ex03.html#importing-data",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "The code chunk below read_csv() of readr package is used to import Exam_data.csv data file into R and save it as an tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "L3/handson_ex03.html#interactive-data-visualisation---ggiraph-methods",
    "href": "L3/handson_ex03.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "ggiraph  is an htmlwidget and a ggplot2 extension. It allows ggplot graphics to be interactive.\nInteractive is made with ggplot geometries that can understand three arguments:\n\nTooltip: a column of data-sets that contain tooltips to be displayed when the mouse is over elements.\nOnclick: a column of data-sets that contain a JavaScript function to be executed when elements are clicked.\nData_id: a column of data-sets that contain an id to be associated with elements.\n\nIf it used within a shiny application, elements associated with an id (data_id) can be selected and manipulated on client and server sides. Refer to this article for more detail explanation.\n\n\nBelow shows a typical code chunk to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive()) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "L3/handson_ex03.html#interactivity",
    "href": "L3/handson_ex03.html#interactivity",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "By hovering the mouse pointer on a data point of interest, the student’s ID will be displayed.\n\n\n\n\n\n\n\n\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS,\n  \"\\n Gender = \", exam_data$GENDER)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID, CLASS and GENDER fields into the newly created field. The tooltip field is then called under geom_dotplot_interactive as an aesthetic mapping with the tooltip argument.\n\n\n\nCode chunk below uses opts_tooltip() of ggiraph to customise tooltip rendering with CSS declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = exam_data$tooltip),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)                                        \n\n\n\n\n\nNotice that the background color of the tooltip is now white and font color is black, whereas the default tooltip has a black background color with white font color.\n\nRefer to Customizing girafe objects to learn more about how to customise ggiraph objects.\n\n\n\n\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)\n\n\n\n\n\n\n\n\nCode chunk below shows the second interactive feature of ggiraph, namely data_id.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\n\n\n\nIn the code chunk below, css codes are used to change the highlighting effect.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly.\n\n\n\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = GENDER, \n        data_id = GENDER),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)   \n\n\n\n\n\n\n\n\nonclick argument of ggiraph provides hotlink interactivity on the web.\nThe code chunk below shown an example of onclick.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\nCoordinated multiple views methods has been implemented in the data visualisation below.\n\n\n\n\n\n\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\nThe data_id aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point."
  },
  {
    "objectID": "T1/takehome_ex01 v1.html",
    "href": "T1/takehome_ex01 v1.html",
    "title": "Singapore’s Demographic Landscape in 2024: Insights and Implications",
    "section": "",
    "text": "Singapore, a dynamic city-state, is characterized by its rapid urban development, aging population, and diverse social fabric. This report delves into the intricacies of Singapore’s demographic landscape in 2024, providing a visual exploration of its population structure and distribution. By examining key demographic indicators, we aim to uncover the underlying trends and discuss their potential implications for the nation’s future."
  },
  {
    "objectID": "T1/takehome_ex01 v1.html#introduction-a-nation-in-transition",
    "href": "T1/takehome_ex01 v1.html#introduction-a-nation-in-transition",
    "title": "Singapore’s Demographic Landscape in 2024: Insights and Implications",
    "section": "",
    "text": "Singapore, a dynamic city-state, is characterized by its rapid urban development, aging population, and diverse social fabric. This report delves into the intricacies of Singapore’s demographic landscape in 2024, providing a visual exploration of its population structure and distribution. By examining key demographic indicators, we aim to uncover the underlying trends and discuss their potential implications for the nation’s future."
  },
  {
    "objectID": "T1/takehome_ex01 v1.html#data-and-methodology",
    "href": "T1/takehome_ex01 v1.html#data-and-methodology",
    "title": "Singapore’s Demographic Landscape in 2024: Insights and Implications",
    "section": "2.0 Data and Methodology",
    "text": "2.0 Data and Methodology\n\n2.1 Data Source and Description\nThe data used in this analysis is sourced from the Department of Statistics, Singapore (DOS). The dataset, “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024,” provides a comprehensive snapshot of Singapore’s resident population as of June 2024. The data is broken down by:\n\nPlanning Area (PA): Defined by the Urban Redevelopment Authority (URA) Master Plan 2019.\nSubzone (SZ): A subdivision within a planning area.\nAge: Single year of age, ranging from 0 to 100+.\nSex: Males or Females.\nPopulation: Resident count, rounded to the nearest 10.\nTime: Reference period\n\n\n\n2.2 Data Processing\nThe analysis was conducted using the R programming language. The following packages from the tidyverse collection were employed:\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork, sf, tmap, knitr, scales)\n\nThe dataset was loaded using read_csv(). Initial data inspection revealed that the Age column contained a non-numeric value (“90_and_Over”), which was corrected. Several new variables were derived to facilitate the analysis:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n               col_types = cols(Age = col_character())) %&gt;%\n  rename(Planning_Area = PA,\n         Subzone = SZ,\n         Population = Pop) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\n        \"Children (0–14)\",\n        \"Youth (15–24)\",\n        \"Adults (25–64)\",\n        \"Elderly (65+)\"\n      )\n    )\n  )\n\nA preview of the cleaned data is shown below:\n\n\n# A tibble: 6 × 8\n  Planning_Area Subzone            Age   Sex   Population  Time Age_Num AgeGroup\n  &lt;chr&gt;         &lt;chr&gt;              &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;   \n1 Ang Mo Kio    Ang Mo Kio Town C… 0     Males         10  2024       0 Childre…\n2 Ang Mo Kio    Ang Mo Kio Town C… 0     Fema…         10  2024       0 Childre…\n3 Ang Mo Kio    Ang Mo Kio Town C… 1     Males         10  2024       1 Childre…\n4 Ang Mo Kio    Ang Mo Kio Town C… 1     Fema…         10  2024       1 Childre…\n5 Ang Mo Kio    Ang Mo Kio Town C… 2     Males         10  2024       2 Childre…\n6 Ang Mo Kio    Ang Mo Kio Town C… 2     Fema…         10  2024       2 Childre…\n\n\nRows: 60,424\nColumns: 8\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…"
  },
  {
    "objectID": "T1/takehome_ex01 v1.html#singapores-population-distribution-a-visual-exploration",
    "href": "T1/takehome_ex01 v1.html#singapores-population-distribution-a-visual-exploration",
    "title": "Singapore’s Demographic Landscape in 2024: Insights and Implications",
    "section": "3.0 Singapore’s Population Distribution: A Visual Exploration",
    "text": "3.0 Singapore’s Population Distribution: A Visual Exploration\nThis section presents a series of visualizations to explore the demographic trends and patterns in Singapore.\n\n3.1 Population Distribution by Planning Area\nWe begin by examining the overall population distribution across Singapore’s planning areas.\n\npopulation_summary &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Percent = round(Population / sum(Population) * 100, 2)) %&gt;%\n  arrange(desc(Population)) %&gt;%\n  mutate(CumulativePercent = round(cumsum(Percent), 2),\n         `S/N` = row_number()) %&gt;%\n  select(`S/N`,\n         Planning_Area,\n         Population,\n         Percent,\n         CumulativePercent)\n\nkable(population_summary,\n      caption = \"Population and Cumulative Percentage by Planning Area\")\n\n\nPopulation and Cumulative Percentage by Planning Area\n\n\nS/N\nPlanning_Area\nPopulation\nPercent\nCumulativePercent\n\n\n\n\n1\nTampines\n284950\n6.79\n6.79\n\n\n2\nBedok\n277660\n6.62\n13.41\n\n\n3\nSengkang\n265550\n6.33\n19.74\n\n\n4\nJurong West\n257910\n6.15\n25.89\n\n\n5\nWoodlands\n255510\n6.09\n31.98\n\n\n6\nYishun\n230320\n5.49\n37.47\n\n\n7\nHougang\n228780\n5.46\n42.93\n\n\n8\nPunggol\n199880\n4.77\n47.70\n\n\n9\nChoa Chu Kang\n190640\n4.55\n52.25\n\n\n10\nBukit Batok\n168390\n4.02\n56.27\n\n\n11\nAng Mo Kio\n160450\n3.83\n60.10\n\n\n12\nBukit Merah\n149390\n3.56\n63.66\n\n\n13\nPasir Ris\n145480\n3.47\n67.13\n\n\n14\nToa Payoh\n140030\n3.34\n70.47\n\n\n15\nBukit Panjang\n138730\n3.31\n73.78\n\n\n16\nSerangoon\n118250\n2.82\n76.60\n\n\n17\nGeylang\n116820\n2.79\n79.39\n\n\n18\nSembawang\n110670\n2.64\n82.03\n\n\n19\nClementi\n102960\n2.46\n84.49\n\n\n20\nQueenstown\n102040\n2.43\n86.92\n\n\n21\nKallang\n101190\n2.41\n89.33\n\n\n22\nBishan\n88210\n2.10\n91.43\n\n\n23\nBukit Timah\n84250\n2.01\n93.44\n\n\n24\nJurong East\n74590\n1.78\n95.22\n\n\n25\nNovena\n52150\n1.24\n96.46\n\n\n26\nMarine Parade\n46950\n1.12\n97.58\n\n\n27\nTanglin\n24540\n0.59\n98.17\n\n\n28\nOutram\n16740\n0.40\n98.57\n\n\n29\nRochor\n13040\n0.31\n98.88\n\n\n30\nRiver Valley\n11970\n0.29\n99.17\n\n\n31\nNewton\n9910\n0.24\n99.41\n\n\n32\nTengah\n7940\n0.19\n99.60\n\n\n33\nSingapore River\n4200\n0.10\n99.70\n\n\n34\nDowntown Core\n4170\n0.10\n99.80\n\n\n35\nSouthern Islands\n2580\n0.06\n99.86\n\n\n36\nMandai\n2130\n0.05\n99.91\n\n\n37\nChangi\n1830\n0.04\n99.95\n\n\n38\nOrchard\n870\n0.02\n99.97\n\n\n39\nSungei Kadut\n600\n0.01\n99.98\n\n\n40\nWestern Water Catchment\n590\n0.01\n99.99\n\n\n41\nMuseum\n530\n0.01\n100.00\n\n\n42\nSeletar\n140\n0.00\n100.00\n\n\n43\nBoon Lay\n0\n0.00\n100.00\n\n\n44\nCentral Water Catchment\n0\n0.00\n100.00\n\n\n45\nChangi Bay\n0\n0.00\n100.00\n\n\n46\nLim Chu Kang\n0\n0.00\n100.00\n\n\n47\nMarina East\n0\n0.00\n100.00\n\n\n48\nMarina South\n0\n0.00\n100.00\n\n\n49\nNorth-Eastern Islands\n0\n0.00\n100.00\n\n\n50\nPaya Lebar\n0\n0.00\n100.00\n\n\n51\nPioneer\n0\n0.00\n100.00\n\n\n52\nSimpang\n0\n0.00\n100.00\n\n\n53\nStraits View\n0\n0.00\n100.00\n\n\n54\nTuas\n0\n0.00\n100.00\n\n\n55\nWestern Islands\n0\n0.00\n100.00\n\n\n\n\n\nThe table above provides an overview of the population distribution by planning area, highlighting the percentage of the total population residing in each area.\n\n\n3.2 Age Group Distribution in Populous Planning Areas\nNext, we focus on the age group distribution within the most populous planning areas.\n\ntop_n &lt;- 30\n\ntop_areas &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Total = sum(Population), .groups = \"drop\") %&gt;%\n  slice_max(Total, n = top_n) %&gt;%\n  pull(Planning_Area)\n\ndf %&gt;%\n  filter(Planning_Area %in% top_areas) %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  ggplot(aes(\n    x = reorder(Planning_Area, -Population),\n    y = Population,\n    fill = AgeGroup\n  )) +\n  geom_col() +\n  scale_y_continuous(labels = scales::label_comma()) +\n  labs(\n    title = paste(\"Age Group Distribution in the Top\", top_n, \"Planning Areas\"),\n    x = \"Planning Area\",\n    y = \"Population\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1,\n      size = 9\n    ),\n    plot.title = element_text(size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\nThis chart illustrates the age group distribution across the top 30 most populous planning areas in Singapore. It reveals significant variations in demographic composition across these areas. For instance, areas with a high proportion of elderly residents may require more healthcare facilities and elder-care services, while areas with a high proportion of youth may benefit from investments in education and recreational facilities.\n\n\n3.3 Planning Area Density and Age Profile\nThis section examines the relationship between population density and average age across Singapore’s planning areas. A composite “Density-Age Index” is created to highlight areas with a combination of high density and older populations.\n\nplanning_sf &lt;- st_read(\"data/MP14/MP14_PLNG_AREA_WEB_PL.shp\")\n\nReading layer `MP14_PLNG_AREA_WEB_PL' from data source \n  `C:\\Users\\jia_y\\OneDrive - Singapore Management University\\Semester 6\\ISSS608 VAA\\jylau91\\ISSS608-VAA\\T1\\data\\MP14\\MP14_PLNG_AREA_WEB_PL.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 55 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nplanning_sf &lt;- planning_sf %&gt;%\n  mutate(Area_km2 = as.numeric(st_area(geometry)) / 1e6) # from m² to km²\n\npop_summary &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\")\n\nplanning_map &lt;- planning_sf %&gt;%\n  mutate(PLN_AREA_N = toupper(PLN_AREA_N)) %&gt;%\n  left_join(pop_summary %&gt;% mutate(Planning_Area = toupper(Planning_Area)),\n            by = c(\"PLN_AREA_N\" = \"Planning_Area\"))\n\npop_by_area_age &lt;- df %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(Planning_Area = toupper(Planning_Area)) # Match shapefile casing\n\nmap_data &lt;- planning_sf %&gt;%\n  select(PLN_AREA_N, geometry, Area_km2) %&gt;%\n  right_join(pop_by_area_age, by = c(\"PLN_AREA_N\" = \"Planning_Area\")) %&gt;%\n  mutate(PopDensity = Population / Area_km2)\n\nmax_density_area &lt;- map_data %&gt;%\n  filter(PopDensity == max(PopDensity, na.rm = TRUE)) %&gt;%\n  select(PLN_AREA_N, PopDensity) %&gt;%\n  distinct()\n\nmap_data &lt;- map_data %&gt;%\n  mutate(PopDensity_Capped = pmin(PopDensity, 20000))\n\navg_age &lt;- df %&gt;%\n  group_by(Planning_Area) %&gt;%\n  summarise(Avg_Age = weighted.mean(Age_Num, w = Population), .groups = \"drop\") %&gt;%\n  mutate(Planning_Area = toupper(Planning_Area))\n\nmap_data &lt;- map_data %&gt;%\n  left_join(avg_age, by = c(\"PLN_AREA_N\" = \"Planning_Area\")) %&gt;%\n  mutate(\n    # Scale both to 0–1\n    PopDensity_Scaled = PopDensity_Capped / max(PopDensity_Capped, na.rm = TRUE),\n    Avg_Age_Scaled = Avg_Age / max(Avg_Age, na.rm = TRUE),\n    \n    # Composite score: equal weight to both\n    DensityAgeIndex = (PopDensity_Scaled + Avg_Age_Scaled) / 2\n  )\n\nmap_index &lt;- map_data %&gt;%\n  group_by(PLN_AREA_N) %&gt;%\n  summarise(DensityAgeIndex = mean(DensityAgeIndex, na.rm = TRUE),\n            geometry = st_union(geometry))\n\ntop5_labels &lt;- map_index %&gt;%\n  slice_max(DensityAgeIndex, n = 5) %&gt;%\n  mutate(centroid = st_centroid(geometry)) %&gt;%\n  mutate(lon = st_coordinates(centroid)[, 1],\n         lat = st_coordinates(centroid)[, 2])\n\n\nggplot(map_index) +\n  geom_sf(aes(fill = DensityAgeIndex), color = \"black\", size = 0.2) +\n  geom_label_repel(\n    data = top5_labels,\n    aes(\n      x = lon,\n      y = lat,\n      label = paste0(PLN_AREA_N, \"\\n\", scales::percent(DensityAgeIndex, accuracy = 1))\n    ),\n    size = 3,\n    fontface = \"bold\",\n    nudge_x = 2000,\n    # nudging right\n    nudge_y = 2000,\n    # nudging up\n    hjust = 0,\n    # align left\n    vjust = 1,\n    # align top\n    box.padding = 0.6,\n    point.padding = 0.5,\n    segment.color = \"black\",\n    segment.size = 0.3,\n    min.segment.length = 0\n  ) +\n  scale_fill_gradientn(\n    colours = c(\"#4575b4\", \"#ffffbf\", \"#d73027\"),\n    limits = c(0, 1),\n    breaks = seq(0, 1, by = 0.1),\n    labels = scales::label_percent(accuracy = 1)\n  ) +\n  labs(\n    title = \"Composite Density-Age Index by Planning Area (2024)\",\n    fill = \"Density-Age Index\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\"),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 8)\n  )\n\n\n\n\n\n\n\n\nThe map displays a “Density-Age Index,” a composite measure combining population density and average age for each planning area. Areas with high index values indicate a combination of high population density and older average age.\n\nThe top 5 areas with the highest Density-Age Index are labeled on the map. These areas may face unique challenges related to infrastructure, housing, and social services.\nAreas in darker shades have a higher index, suggesting a greater concentration of older residents and denser populations. This could imply a higher demand for eldercare facilities, accessible transportation, and age-friendly housing.\nAreas in lighter shades have a lower index, indicating younger populations and/or less dense living conditions. These areas might benefit from investments in schools, childcare facilities, and family-oriented amenities.\nSome planning areas are colored in grey, indicating missing data. Further investigation is needed to understand why data is unavailable for these areas and how this might affect the overall analysis.\n\nThe Density-Age Index highlights planning areas with a combination of high population density and older populations. This composite measure can help policymakers identify areas that may require targeted interventions, such as:\n\nDevelopment of elder-care facilities and services\nImprovements to transportation accessibility\nAdaptation of housing and infrastructure to meet the needs of an aging population\n\n\n\n3.4 Singapore’s Population Structure: A Detailed Look\nFinally, we examine Singapore’s overall population structure using a population pyramid.\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num)\n\n# Prepare the data for ggplot2\nplot_df &lt;- df %&gt;%\n  # Group ages by 5-year intervals\n  mutate(AgeGroup = cut(Age_Num,\n                       breaks = if (max_age &gt; 90) {\n                         c(seq(0, 85, by = 5), 90, max_age + 1)\n                       } else {\n                         c(seq(0, 85, by = 5), max_age + 1)\n                       },\n                       right = FALSE,\n                       labels = if (max_age &gt; 90) {\n                         c(\n                           paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                           \"Beyond 90\"\n                         )\n                       } else {\n                         c(\n                           paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                           \"Beyond 90\"\n                         )\n                       })) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population)) %&gt;%\n  ungroup() %&gt;%\n  mutate(Population = ifelse(Sex == \"Males\", -Population, Population)) %&gt;%\n  mutate(PopulationAbs = abs(Population)) # Create absolute value for labels\n\n# Create the population pyramid using ggplot2\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.8, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(labels = function(x)\n    format(abs(x), big.mark = \",\", scientific = FALSE)) +\n  scale_fill_manual(values = c(\"Females\" = \"#FFB6C1\", \"Males\" = \"#87CEFA\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0)\n  )\n\n\n\n\n\n\n\n\nThe population pyramid reveals the following demographic characteristics of Singapore:\n\nThe pyramid has a broad base, indicating a large proportion of the population in the younger age groups. This suggests a potentially high birth rate and a growing population.\nThe pyramid gradually narrows towards the top, indicating a decrease in population size with increasing age. This is typical of most populations, as mortality rates tend to increase with age.\nThere are some irregularities in the shape of the pyramid, such as bulges or constrictions at certain age groups. These irregularities may be due to historical events, such as changes in birth rates or migration patterns.\nThe male and female populations are roughly balanced across most age groups, although there may be slight differences at the oldest ages."
  },
  {
    "objectID": "T1/takehome_ex01 v1.html#conclusion-key-demographic-trends-and-future-outlook",
    "href": "T1/takehome_ex01 v1.html#conclusion-key-demographic-trends-and-future-outlook",
    "title": "Singapore’s Demographic Landscape in 2024: Insights and Implications",
    "section": "4.0 Conclusion: Key Demographic Trends and Future Outlook",
    "text": "4.0 Conclusion: Key Demographic Trends and Future Outlook\nSingapore’s demographic landscape in 2024 is characterized by a combination of factors, including a large working-age population, increasing longevity, and variations in age distribution across planning areas. These trends have significant implications for Singapore’s future.\n\nThe large working-age population presents an opportunity for continued economic growth and productivity. However, it also necessitates policies to ensure workforce adaptability and skills development in a rapidly changing global economy.\nThe increasing proportion of elderly residents poses challenges and opportunities. Singapore will need to invest in healthcare infrastructure, eldercare services, and age-friendly housing to support its aging population. At the same time, the experience and wisdom of older adults can be a valuable asset to society.\nVariations in age distribution across planning areas highlight the need for targeted urban planning and social policies. Areas with a high proportion of elderly residents may require different amenities and services than areas with a high proportion of young families.\n\nBy understanding these demographic trends, Singapore can proactively address the challenges and capitalize on the opportunities presented by its evolving population landscape. Continued monitoring of demographic changes and adaptation of policies will be crucial to ensuring a sustainable and inclusive future for all Singaporeans."
  },
  {
    "objectID": "L3/handson_ex03.html#interactive-data-visualisation---plotly-methods",
    "href": "L3/handson_ex03.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "Plotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n\nThere are two ways to create interactive graph by using plotly, they are:\n\nby using plot_ly(), and\nby using ggplotly()\n\n\n\nThe tabset below shows an example a basic interactive plot created by using plot_ly().\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)\n\n\n\n\n\n\n\n\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n\n\n\nThe code chunk below plots an interactive scatter plot by using ggplotly().\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\nThe creation of a coordinated linked plot by using plotly involves three steps:\n\nhighlight_key() of plotly package is used as shared data.\ntwo scatterplots will be created by using ggplot2 functions.\nlastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "L3/handson_ex03.html#interactive-data-visualisation---crosstalk-methods",
    "href": "L3/handson_ex03.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "Crosstalk is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).\n\n\n\nA wrapper of the JavaScript Library DataTables\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\nDT::datatable(exam_data, class= \"compact\")\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "L3/handson_ex03.html#reference",
    "href": "L3/handson_ex03.html#reference",
    "title": "Hands-on-Exercise-03",
    "section": "",
    "text": "This link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\n\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "L3/handson_ex03.html#overview",
    "href": "L3/handson_ex03.html#overview",
    "title": "Hands-on-Exercise-03",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nWhen telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics. In this hands-on exercise, you will learn how to create animated data visualisation by using gganimate and plotly r packages. At the same time, you will also learn how to (i) reshape data by using tidyr package, and (ii) process, wrangle and transform data by using dplyr package.\n\n4.1.1 Basic concepts of animation\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n\n\n\n4.1.2 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "L3/handson_ex03.html#getting-started",
    "href": "L3/handson_ex03.html#getting-started",
    "title": "Hands-on-Exercise-03",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Loading the R packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\n\n4.2.2 Importing the data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\n\nUnfortunately, mutate_each_() was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nInstead of using mutate_at(), across() can be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(all_of(col), as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "L3/handson_ex03.html#animated-data-visualisation-gganimate-methods",
    "href": "L3/handson_ex03.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on-Exercise-03",
    "section": "4.3 Animated Data Visualisation: gganimate methods",
    "text": "4.3 Animated Data Visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\n4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\n\n\n\n\n4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "L3/handson_ex03.html#animated-data-visualisation-plotly",
    "href": "L3/handson_ex03.html#animated-data-visualisation-plotly",
    "title": "Hands-on-Exercise-03",
    "section": "4.4 Animated Data Visualisation: plotly",
    "text": "4.4 Animated Data Visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\n4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nThings to learn from the code chunk above\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg.\nggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\nunique_countries &lt;- unique(globalPop$Country)\ncountry_colors &lt;- setNames(RColorBrewer::brewer.pal(length(unique_countries), \"Paired\")[1:length(unique_countries)],\n                           unique_countries)\n\nplot_ly(globalPop,\n        x = ~Old,\n        y = ~Young,\n        size = ~Population,\n        color = ~Country,\n        frame = ~Year,\n        type = 'scatter',\n        mode = 'markers',\n        sizes = c(10, 60),\n        text = ~paste(\"Country:\", Country,\n                      \"&lt;br&gt;Year:\", Year,\n                      \"&lt;br&gt;% Aged:\", Old,\n                      \"&lt;br&gt;% Young:\", Young,\n                      \"&lt;br&gt;Population:\", format(Population, big.mark = \",\")),\n        hoverinfo = \"text\",\n        marker = list(opacity = 0.7, sizemode = \"diameter\")) %&gt;%\n  layout(title = \"Global Population: % Aged vs % Young\",\n         xaxis = list(title = \"% Aged\", range = c(0, 80)),\n         yaxis = list(title = \"% Young\", range = c(0, 100)),\n         showlegend = TRUE) %&gt;%\n  animation_opts(\n    frame = 1000,\n    transition = 0,\n    redraw = TRUE\n  ) %&gt;%\n  animation_slider(\n    currentvalue = list(prefix = \"Year: \")\n  ) %&gt;%\n  animation_button(label = \"Play\")\n\n\n\n\n\n\n\n4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "L3/handson_ex03.html#reference-1",
    "href": "L3/handson_ex03.html#reference-1",
    "title": "Hands-on-Exercise-03",
    "section": "4.5 Reference",
    "text": "4.5 Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html",
    "href": "T1/takehome_ex01 v2.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts.\n\n\n\n\n\n\nThe following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num)\n\n# Prepare the data for ggplot2\nplot_df &lt;- df %&gt;%\n# Group ages by 5-year intervals\nmutate(AgeGroup = cut(Age_Num,\n                      breaks = if (max_age &gt; 90) {\n                        c(seq(0, 85, by = 5), 90, max_age + 1)\n                      } else {\n                        c(seq(0, 85, by = 5), max_age + 1)\n                      },\n                      right = FALSE,\n                      labels = if (max_age &gt; 90) {\n                        c(\n                          paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                          \"90+\"\n                        )\n                      } else {\n                        c(\n                          paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                          \"Beyond 90\"\n                        )\n                      })) %&gt;%\ngroup_by(AgeGroup, Sex) %&gt;%\nsummarise(Population = sum(Population)) %&gt;%\nungroup() %&gt;%\nmutate(Population = ifelse(Sex == \"Males\", -Population, Population)) %&gt;%\nmutate(PopulationAbs = abs(Population)) # Create absolute value for labels\n\n# Create the population pyramid using ggplot2\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000)\n  ) +\n  scale_fill_manual(values = c(\"Females\" = \"#FFB6C1\", \"Males\" = \"#87CEFA\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0)\n  )\n\n\n\n\n\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Prepare the expanded dataset (same as before)\ndensity_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Step 2: Calculate density peaks using base R's density()\ndensity_peaks &lt;- density_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    density_obj = list(density(Age_Num, kernel = \"gaussian\"))\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = density_obj$x[which.max(density_obj$y)],\n    peak_y = max(density_obj$y),\n    label = paste0(\"Peak: Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n\n# Plot\nggplot(density_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\") +\n  ggrepel::geom_label_repel(\n    data = density_peaks,\n    aes(x = peak_x, y = peak_y, label = label, fill = Region),\n    color = \"black\",\n    size = 3,\n    box.padding = 0.3,\n    point.padding = 0.2,\n    max.overlaps = 10,\n    show.legend = FALSE,\n    nudge_y = -0.005\n  ) +\n  labs(\n    title = \"Age Distribution by Region (2024)\",\n    subtitle = \"Each region's curve is normalized. Labels show peak (most common) age.\",\n    x = \"Age\",\n    y = \"Relative Density (Normalized within Region)\",\n    fill = \"Region\"\n  ) +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_classic() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n# Step 1: Create faceted dataset\ndensity_df_facet &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  mutate(RegionFacet = Region) %&gt;%      # preserve Region for per-facet filtering\n  bind_rows(\n    df %&gt;%\n      filter(!is.na(Age_Num)) %&gt;%\n      mutate(Region = Region, RegionFacet = \"Overall\")  # keep Region for color, \"Overall\" for facet\n  ) %&gt;%\n  group_by(RegionFacet, Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n\n# Step 2: Compute density peaks for each region/facet combination\ndensity_peaks_facet &lt;- density_df_facet %&gt;%\n  group_by(RegionFacet, Region) %&gt;%\n  summarise(\n    density_obj = list(density(Age_Num, kernel = \"gaussian\")),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = density_obj$x[which.max(density_obj$y)],\n    peak_y = max(density_obj$y),\n    label = paste0(\"Peak: Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n\ndensity_df_facet$RegionFacet &lt;- factor(\n  density_df_facet$RegionFacet,\n  levels = c(\"Overall\", \"Central\", \"East\", \"North-East\", \"North\", \"West\")\n)\n\ndensity_peaks_facet$RegionFacet &lt;- factor(\n  density_peaks_facet$RegionFacet,\n  levels = c(\"Overall\", \"Central\", \"East\", \"North-East\", \"North\", \"West\")\n)\n\nggplot(density_df_facet, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\") +\n  ggrepel::geom_label_repel(\n    data = density_peaks_facet,\n    aes(x = peak_x, y = peak_y, label = label, fill = Region),\n    color = \"black\",\n    size = 3,\n    box.padding = 0.3,\n    point.padding = 0.2,\n    nudge_y = -0.004,\n    max.overlaps = 20,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Age Distribution (2024): Overall vs Individual Regions\",\n    subtitle = \"Overall facet shows all regions; other facets show individual region profiles\",\n    x = \"Age\",\n    y = \"Relative Density (Normalized within Region)\",\n    fill = \"Region\"\n  ) +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  facet_wrap(~ RegionFacet, ncol = 2, scales =\"fixed\", axes =\"all_x\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5, size = 14),\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.text = element_text(face = \"bold\", size = 11),\n    legend.position = \"right\",\n    panel.grid.major.y = element_line(color = \"grey85\", size = 0.3),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.border = element_rect(color = \"grey50\", fill = NA, size = 0.8),\n    axis.text.y = element_text(size = 9),\n    axis.title.y = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\n\nCreating the region summary dataset\n\nregion_age_summary &lt;- df %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  mutate(TotalRegionPop = sum(Population)) %&gt;%\n  group_by(Region, AgeGroup) %&gt;%\n  summarise(\n    Total_Pop = sum(Population),\n    Avg_Age = weighted.mean(Age_Num, w = Population),\n    Pct_Pop = sum(Population) / first(TotalRegionPop) * 100,\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Elderly (65+)\", \"Adults (25–64)\", \"Youth (15–24)\", \"Children (0–14)\")\n    ),\n    label = paste0(round(Pct_Pop, 1), \"%\")\n  )\n\n\n# Plot\nggplot(region_age_summary, aes(x = Total_Pop, y = Avg_Age, size = Total_Pop, fill = AgeGroup)) +\n  geom_point(shape = 21, color = \"black\", alpha = 0.8) +\n  scale_x_continuous(\n    labels = scales::label_comma(),\n    limits = c(0, 800000),\n    breaks = seq(0, 800000, by = 200000)\n  ) +\n  scale_y_continuous(\n    limits = c(0, 90),\n    breaks = seq(0, 90, by = 10)\n  ) +\n  scale_size_continuous(range = c(10, 30), guide = \"none\") +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  guides(\n    fill = guide_legend(override.aes = list(size = 6))  # Enlarge legend bubbles\n  ) +\n  facet_wrap(~ Region) +\n  labs(\n    title = \"Age Group Structure by Region (June 2024)\",\n    subtitle = \"Bubble size and x-position represent total population of each age group\",\n    x = \"Total Population (by Age Group)\",\n    y = \"Average Age\",\n    fill = \"Age Group\",\n    caption = \"Dataset: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 &lt;/br&gt; Source: Department of Statistics, Singapore\"\n  ) +\n  geom_label_repel(\n    aes(label = label),\n    size = 3.5,\n    nudge_x = 180000,\n    nudge_y = 5,\n    show.legend = FALSE,\n    segment.color = \"grey90\",\n    box.padding = 0.35,\n    point.padding = 0.5,\n    min.segment.length = 0\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 11),\n    legend.text = element_text(size = 10),\n    legend.key = element_rect(fill = NA),\n    panel.border = element_rect(color = \"grey\", fill = NA, size = 0.8)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n# Step 1: Aggregate by Planning Area and Age Group in Central region\nwaffle_data &lt;- df %&gt;%\n  filter(Region == \"Central\") %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Pop = sum(Population, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(Planning_Area) %&gt;%\n  mutate(\n    total = sum(Pop),\n    pct = round(Pop / total * 100),  # ensure it's numeric whole number\n    category = AgeGroup\n  ) %&gt;%\n  filter(pct &gt; 0) %&gt;%  # eliminate 0s to prevent uncount error\n  ungroup() %&gt;%\n  select(Planning_Area, category, pct)\n\n# Step 2: Expand to grid tiles (10x10)\nwaffle_expanded &lt;- waffle_data %&gt;%\n  uncount(pct) %&gt;%\n  group_by(Planning_Area, category) %&gt;%\n  mutate(\n    id = row_number() - 1,\n    x = id %% 10,\n    y = id %/% 10\n  ) %&gt;%\n  ungroup()\n\n# Step 3: Plot waffle chart\nggplot(waffle_expanded, aes(x = x, y = y, fill = category)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  coord_equal() +\n  facet_wrap(~ Planning_Area, ncol = 2) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Group Composition in Central Region (Waffle Charts)\",\n    subtitle = \"Each square represents ~1% of the Planning Area population\",\n    fill = \"Age Group\",\n    caption = \"Source: Department of Statistics, Singapore\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    strip.text = element_text(size = 10, face = \"bold\"),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#introduction",
    "href": "T1/takehome_ex01 v2.html#introduction",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts."
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#loading-r-packages-and-dataset",
    "href": "T1/takehome_ex01 v2.html#loading-r-packages-and-dataset",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#visualisations",
    "href": "T1/takehome_ex01 v2.html#visualisations",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# Find the maximum age\nmax_age &lt;- max(df$Age_Num)\n\n# Prepare the data for ggplot2\nplot_df &lt;- df %&gt;%\n# Group ages by 5-year intervals\nmutate(AgeGroup = cut(Age_Num,\n                      breaks = if (max_age &gt; 90) {\n                        c(seq(0, 85, by = 5), 90, max_age + 1)\n                      } else {\n                        c(seq(0, 85, by = 5), max_age + 1)\n                      },\n                      right = FALSE,\n                      labels = if (max_age &gt; 90) {\n                        c(\n                          paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                          \"90+\"\n                        )\n                      } else {\n                        c(\n                          paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)),\n                          \"Beyond 90\"\n                        )\n                      })) %&gt;%\ngroup_by(AgeGroup, Sex) %&gt;%\nsummarise(Population = sum(Population)) %&gt;%\nungroup() %&gt;%\nmutate(Population = ifelse(Sex == \"Males\", -Population, Population)) %&gt;%\nmutate(PopulationAbs = abs(Population)) # Create absolute value for labels\n\n# Create the population pyramid using ggplot2\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000)\n  ) +\n  scale_fill_manual(values = c(\"Females\" = \"#FFB6C1\", \"Males\" = \"#87CEFA\")) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0)\n  )\n\n\n\n\n\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#bubble-plot-of-regions",
    "href": "T1/takehome_ex01 v2.html#bubble-plot-of-regions",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Creating the region summary dataset\n\nregion_age_summary &lt;- df %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  mutate(TotalRegionPop = sum(Population)) %&gt;%\n  group_by(Region, AgeGroup) %&gt;%\n  summarise(\n    Total_Pop = sum(Population),\n    Avg_Age = weighted.mean(Age_Num, w = Population),\n    Pct_Pop = sum(Population) / first(TotalRegionPop) * 100,\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Elderly (65+)\", \"Adults (25–64)\", \"Youth (15–24)\", \"Children (0–14)\")\n    ),\n    label = paste0(round(Pct_Pop, 1), \"%\")\n  )\n\n\n# Plot\nggplot(region_age_summary, aes(x = Total_Pop, y = Avg_Age, size = Total_Pop, fill = AgeGroup)) +\n  geom_point(shape = 21, color = \"black\", alpha = 0.8) +\n  scale_x_continuous(\n    labels = scales::label_comma(),\n    limits = c(0, 800000),\n    breaks = seq(0, 800000, by = 200000)\n  ) +\n  scale_y_continuous(\n    limits = c(0, 90),\n    breaks = seq(0, 90, by = 10)\n  ) +\n  scale_size_continuous(range = c(10, 30), guide = \"none\") +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  guides(\n    fill = guide_legend(override.aes = list(size = 6))  # Enlarge legend bubbles\n  ) +\n  facet_wrap(~ Region) +\n  labs(\n    title = \"Age Group Structure by Region (June 2024)\",\n    subtitle = \"Bubble size and x-position represent total population of each age group\",\n    x = \"Total Population (by Age Group)\",\n    y = \"Average Age\",\n    fill = \"Age Group\",\n    caption = \"Dataset: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 &lt;/br&gt; Source: Department of Statistics, Singapore\"\n  ) +\n  geom_label_repel(\n    aes(label = label),\n    size = 3.5,\n    nudge_x = 180000,\n    nudge_y = 5,\n    show.legend = FALSE,\n    segment.color = \"grey90\",\n    box.padding = 0.35,\n    point.padding = 0.5,\n    min.segment.length = 0\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 11),\n    legend.text = element_text(size = 10),\n    legend.key = element_rect(fill = NA),\n    panel.border = element_rect(color = \"grey\", fill = NA, size = 0.8)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#section",
    "href": "T1/takehome_ex01 v2.html#section",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# Step 1: Aggregate by Planning Area and Age Group in Central region\nwaffle_data &lt;- df %&gt;%\n  filter(Region == \"Central\") %&gt;%\n  group_by(Planning_Area, AgeGroup) %&gt;%\n  summarise(Pop = sum(Population, na.rm = TRUE), .groups = \"drop\") %&gt;%\n  group_by(Planning_Area) %&gt;%\n  mutate(\n    total = sum(Pop),\n    pct = round(Pop / total * 100),  # ensure it's numeric whole number\n    category = AgeGroup\n  ) %&gt;%\n  filter(pct &gt; 0) %&gt;%  # eliminate 0s to prevent uncount error\n  ungroup() %&gt;%\n  select(Planning_Area, category, pct)\n\n# Step 2: Expand to grid tiles (10x10)\nwaffle_expanded &lt;- waffle_data %&gt;%\n  uncount(pct) %&gt;%\n  group_by(Planning_Area, category) %&gt;%\n  mutate(\n    id = row_number() - 1,\n    x = id %% 10,\n    y = id %/% 10\n  ) %&gt;%\n  ungroup()\n\n# Step 3: Plot waffle chart\nggplot(waffle_expanded, aes(x = x, y = y, fill = category)) +\n  geom_tile(color = \"white\", size = 0.5) +\n  coord_equal() +\n  facet_wrap(~ Planning_Area, ncol = 2) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Group Composition in Central Region (Waffle Charts)\",\n    subtitle = \"Each square represents ~1% of the Planning Area population\",\n    fill = \"Age Group\",\n    caption = \"Source: Department of Statistics, Singapore\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text = element_blank(),\n    axis.title = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5, face = \"bold\"),\n    strip.text = element_text(size = 10, face = \"bold\"),\n    legend.position = \"bottom\"\n  )"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#x-density-plot-of-population",
    "href": "T1/takehome_ex01 v2.html#x-density-plot-of-population",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# Step 1: Prepare the expanded dataset (same as before)\ndensity_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Step 2: Calculate density peaks using base R's density()\ndensity_peaks &lt;- density_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    density_obj = list(density(Age_Num, kernel = \"gaussian\"))\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = density_obj$x[which.max(density_obj$y)],\n    peak_y = max(density_obj$y),\n    label = paste0(\"Peak: Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n\n# Plot\nggplot(density_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\") +\n  ggrepel::geom_label_repel(\n    data = density_peaks,\n    aes(x = peak_x, y = peak_y, label = label, fill = Region),\n    color = \"black\",\n    size = 3,\n    box.padding = 0.3,\n    point.padding = 0.2,\n    max.overlaps = 10,\n    show.legend = FALSE,\n    nudge_y = -0.005\n  ) +\n  labs(\n    title = \"Age Distribution by Region (2024)\",\n    subtitle = \"Each region's curve is normalized. Labels show peak (most common) age.\",\n    x = \"Age\",\n    y = \"Relative Density (Normalized within Region)\",\n    fill = \"Region\"\n  ) +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  theme_classic() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    legend.position = \"bottom\"\n  )\n\n\n\n\n\n\n\n\n\n# Step 1: Create faceted dataset\ndensity_df_facet &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  mutate(RegionFacet = Region) %&gt;%      # preserve Region for per-facet filtering\n  bind_rows(\n    df %&gt;%\n      filter(!is.na(Age_Num)) %&gt;%\n      mutate(Region = Region, RegionFacet = \"Overall\")  # keep Region for color, \"Overall\" for facet\n  ) %&gt;%\n  group_by(RegionFacet, Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n\n# Step 2: Compute density peaks for each region/facet combination\ndensity_peaks_facet &lt;- density_df_facet %&gt;%\n  group_by(RegionFacet, Region) %&gt;%\n  summarise(\n    density_obj = list(density(Age_Num, kernel = \"gaussian\")),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = density_obj$x[which.max(density_obj$y)],\n    peak_y = max(density_obj$y),\n    label = paste0(\"Peak: Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n\ndensity_df_facet$RegionFacet &lt;- factor(\n  density_df_facet$RegionFacet,\n  levels = c(\"Overall\", \"Central\", \"East\", \"North-East\", \"North\", \"West\")\n)\n\ndensity_peaks_facet$RegionFacet &lt;- factor(\n  density_peaks_facet$RegionFacet,\n  levels = c(\"Overall\", \"Central\", \"East\", \"North-East\", \"North\", \"West\")\n)\n\nggplot(density_df_facet, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\") +\n  ggrepel::geom_label_repel(\n    data = density_peaks_facet,\n    aes(x = peak_x, y = peak_y, label = label, fill = Region),\n    color = \"black\",\n    size = 3,\n    box.padding = 0.3,\n    point.padding = 0.2,\n    nudge_y = -0.004,\n    max.overlaps = 20,\n    show.legend = FALSE\n  ) +\n  labs(\n    title = \"Age Distribution (2024): Overall vs Individual Regions\",\n    subtitle = \"Overall facet shows all regions; other facets show individual region profiles\",\n    x = \"Age\",\n    y = \"Relative Density (Normalized within Region)\",\n    fill = \"Region\"\n  ) +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  facet_wrap(~ RegionFacet, ncol = 2, scales =\"fixed\", axes =\"all_x\") +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5, size = 14),\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.text = element_text(face = \"bold\", size = 11),\n    legend.position = \"right\",\n    panel.grid.major.y = element_line(color = \"grey85\", size = 0.3),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.border = element_rect(color = \"grey50\", fill = NA, size = 0.8),\n    axis.text.y = element_text(size = 9),\n    axis.title.y = element_text(size = 10)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01 v2.html#x-bubble-plot-of-regions",
    "href": "T1/takehome_ex01 v2.html#x-bubble-plot-of-regions",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Creating the region summary dataset\n\nregion_age_summary &lt;- df %&gt;%\n  filter(!is.na(Region)) %&gt;%\n  group_by(Region) %&gt;%\n  mutate(TotalRegionPop = sum(Population)) %&gt;%\n  group_by(Region, AgeGroup) %&gt;%\n  summarise(\n    Total_Pop = sum(Population),\n    Avg_Age = weighted.mean(Age_Num, w = Population),\n    Pct_Pop = sum(Population) / first(TotalRegionPop) * 100,\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Elderly (65+)\", \"Adults (25–64)\", \"Youth (15–24)\", \"Children (0–14)\")\n    ),\n    label = paste0(round(Pct_Pop, 1), \"%\")\n  )\n\n\n# Plot\nggplot(region_age_summary, aes(x = Total_Pop, y = Avg_Age, size = Total_Pop, fill = AgeGroup)) +\n  geom_point(shape = 21, color = \"black\", alpha = 0.8) +\n  scale_x_continuous(\n    labels = scales::label_comma(),\n    limits = c(0, 800000),\n    breaks = seq(0, 800000, by = 200000)\n  ) +\n  scale_y_continuous(\n    limits = c(0, 90),\n    breaks = seq(0, 90, by = 10)\n  ) +\n  scale_size_continuous(range = c(10, 30), guide = \"none\") +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  guides(\n    fill = guide_legend(override.aes = list(size = 6))  # Enlarge legend bubbles\n  ) +\n  facet_wrap(~ Region) +\n  labs(\n    title = \"Age Group Structure by Region (June 2024)\",\n    subtitle = \"Bubble size and x-position represent total population of each age group\",\n    x = \"Total Population (by Age Group)\",\n    y = \"Average Age\",\n    fill = \"Age Group\",\n    caption = \"Dataset: Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024 &lt;/br&gt; Source: Department of Statistics, Singapore\"\n  ) +\n  geom_label_repel(\n    aes(label = label),\n    size = 3.5,\n    nudge_x = 180000,\n    nudge_y = 5,\n    show.legend = FALSE,\n    segment.color = \"grey90\",\n    box.padding = 0.35,\n    point.padding = 0.5,\n    min.segment.length = 0\n  ) +\n  theme_minimal() +\n  theme(\n    strip.text = element_text(size = 12, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    legend.title = element_text(size = 11),\n    legend.text = element_text(size = 10),\n    legend.key = element_rect(fill = NA),\n    panel.border = element_rect(color = \"grey\", fill = NA, size = 0.8)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01v2.html",
    "href": "T1/takehome_ex01v2.html",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts.\n\n\n\n\n\n\nThe following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x, RColorBrewer, ggdist)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n# === STEP 1: OVERALL PLOT ===\n\n# Prepare overall dataset\noverall_df &lt;- df %&gt;%\n  filter(!is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Compute peak by Region\noverall_peaks &lt;- overall_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    d = list(density(Age_Num)),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = d$x[which.max(d$y)],\n    label = paste0(Region, \": Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n# Combine labels\noverall_annotation &lt;- paste(overall_peaks$label, collapse = \"\\n\")\n\n# Overall plot\noverall_plot &lt;- ggplot(overall_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\", linewidth = 0.7) +\n  annotate(\"text\", x = 5, y = Inf, vjust = 1.2,\n           label = overall_annotation, hjust = 0, size = 3.5, fontface = \"italic\") +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Distribution (2024): Overall\",\n    subtitle = \"Density by Region with Y-axis scaled per chart\",\n    x = \"Age\", y = \"Relative Density\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"right\"\n  )\n\n# === STEP 2: REGION FUNCTION ===\n\ncompute_top3_peaks &lt;- function(region_df) {\n  region_df %&gt;%\n    group_by(Planning_Area) %&gt;%\n    summarise(d = list(density(Age_Num)), .groups = \"drop\") %&gt;%\n    rowwise() %&gt;%\n    mutate(\n      peak_x = d$x[which.max(d$y)],\n      peak_y = max(d$y)\n    ) %&gt;%\n    ungroup() %&gt;%\n    slice_max(order_by = peak_y, n = 3) %&gt;%\n    mutate(label = Planning_Area) %&gt;%\n    select(Planning_Area, peak_x, peak_y, label)\n}\n\nmake_region_plot &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- df %&gt;%\n    filter(Region == region_name, !is.na(Age_Num)) %&gt;%\n    group_by(Planning_Area, Age_Num) %&gt;%\n    summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n    uncount(weights = Population) %&gt;%\n    mutate(Planning_Area = factor(Planning_Area))\n\n  # Colors\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  base_colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(base_colors) &lt;- levels(region_df$Planning_Area)\n\n  # Top 3 peak labels\n  peak_labels &lt;- compute_top3_peaks(region_df)\n\n  ggplot(region_df, aes(x = Age_Num, fill = Planning_Area, color = Planning_Area)) +\n    geom_density(alpha = 0.5, linewidth = 0.7) +\n    ggrepel::geom_label_repel(\n      data = peak_labels,\n      aes(x = peak_x, y = peak_y, label = label, fill = Planning_Area),\n      color = \"black\", size = 3,\n      box.padding = 0.3, segment.color = \"grey50\", show.legend = FALSE\n    ) +\n    scale_fill_manual(values = base_colors, guide = guide_legend(override.aes = list(alpha = 1))) +\n    scale_color_manual(values = base_colors, guide = \"none\") +\n    scale_x_continuous(breaks = seq(0, 90, 10)) +\n    labs(\n      title = paste(\"Age Distribution –\", region_name),\n      x = \"Age\", y = \"Relative Density\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"right\"\n    )\n}\n\n# === STEP 3: Region Plots ===\n\ncentral_plot     &lt;- make_region_plot(\"Central\", \"Set2\")\neast_plot        &lt;- make_region_plot(\"East\", \"Pastel1\")\nnorth_plot       &lt;- make_region_plot(\"North\", \"Accent\")\nnorth_east_plot  &lt;- make_region_plot(\"North-East\", \"Dark2\")\nwest_plot        &lt;- make_region_plot(\"West\", \"Set3\")\n\n# === STEP 4: Assemble Layout ===\n\nfinal_plot &lt;- \n  overall_plot /\n  (central_plot | east_plot) /\n  (north_plot | north_east_plot) /\n  (west_plot + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Age Distribution (2024): Overall and by Region\",\n    subtitle = \"Top: Overall with regional overlay | Below: Each region shows its planning areas (Top 3 labelled)\\nY-axis scales independently per chart\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 5: Render ===\nfinal_plot"
  },
  {
    "objectID": "T1/takehome_ex01v2.html#introduction",
    "href": "T1/takehome_ex01v2.html#introduction",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "Singapore’s population structure reveals a dynamic interplay between urban development, ageing, and youth distribution. Let’s explore the demographic breakdown of 2024 through interactive charts."
  },
  {
    "objectID": "T1/takehome_ex01v2.html#loading-r-packages-and-dataset",
    "href": "T1/takehome_ex01v2.html#loading-r-packages-and-dataset",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "The following R packages were used via pacman::p_load() to support data wrangling, visualization, and mapping for Singapore’s 2024 population data.\n\n\n\nPackage\nDescription\nOfficial Link\n\n\n\n\ntidyverse\nA collection of R packages (including ggplot2, dplyr, readr, etc.) for data manipulation, exploration, and visualization. It forms the foundation of modern R workflows.\ntidyverse.org\n\n\nggthemes\nProvides additional themes, color palettes, and formatting options for ggplot2 charts, such as Economist, Wall Street Journal, and Tufte styles.\nCRAN – ggthemes\n\n\ngghighlight\nSimplifies highlighting specific data in ggplot2 visualizations without manual filtering. Great for emphasizing trends.\nGitHub – gghighlight\n\n\npatchwork\nEnables easy composition of multiple ggplot2 plots into complex layouts. Very useful for dashboards or comparative plots.\npatchwork.data-imaginist.com\n\n\nsf\nProvides tools for handling and analyzing geospatial vector data using a data.frame-like structure. Compatible with the tidyverse.\nR-Spatial – sf\n\n\ntmap\nA flexible mapping package for creating static and interactive thematic maps from spatial data, built to work well with sf.\nr-tmap.github.io\n\n\n\n\npacman::p_load(tidyverse, ggthemes, gghighlight, ggrepel, patchwork,  sf, tmap, knitr, scales, colorspaces, ggh4x, RColorBrewer, ggdist)\n\n\n\n\nThe dataset used is “Singapore Residents by Planning Area / Subzone, Single Year of Age and Sex, June 2024”, it is shared by the Department of Statistics, Singapore (DOS).\nWe begin by loading the required libraries and reading the dataset using readr::read_csv() from the tidyverse collection:\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\")\n\nThis dataset provides a snapshot of the resident population in Singapore as of June 2024, broken down by planning areas, subzones, age, and sex.\n\n\n\n\n\nColumn\nDescription\n\n\n\n\nPA\nPlanning Area – As defined by URA Master Plan 2019\n\n\nSZ\nSubzone – Subdivision within a planning area\n\n\nAge\nSingle Year of Age – From 0 to 100+\n\n\nSex\nSex – “Males” or “Females”\n\n\nPop\nResident Count – Rounded to the nearest 10\n\n\nTime\nReference Period\n\n\n\n\n\n\n\nResidents who have been away from Singapore for more than 12 continuous months are excluded.\nAll population counts are rounded to the nearest 10, which may result in totals that do not sum exactly.\nThe reference period for this dataset is June 2024.\n\n\n\n\nBefore we proceed with visualisation, a few inspection and validation of the dataset will be performed.\n\nPreview of Loaded dataset (Header)Preview of Loaded dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 6\n  PA         SZ                     Age   Sex       Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0     Males      10  2024\n2 Ang Mo Kio Ang Mo Kio Town Centre 0     Females    10  2024\n3 Ang Mo Kio Ang Mo Kio Town Centre 1     Males      10  2024\n4 Ang Mo Kio Ang Mo Kio Town Centre 1     Females    10  2024\n5 Ang Mo Kio Ang Mo Kio Town Centre 2     Males      10  2024\n6 Ang Mo Kio Ang Mo Kio Town Centre 2     Females    10  2024\n\n\n\n\n\n\nRows: 60,424\nColumns: 6\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ Age  &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"5\", \"6\", …\n$ Sex  &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Females\", \"Male…\n$ Pop  &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, 30, 10, 3…\n$ Time &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024,…\n\n\n\n\n\nThere are 60,424 rows noted with the 6 columns as stated in the source notes stated in earlier section 2.1.\nHowever the column Age has been loaded as a character type instead of double (numeric) variable as it includes a categorical label for the age group 90+ as “90_and_Over”. This could be handled by converting this label into “90”together with an additional categorical label for this project.\n\ndf &lt;- read_csv(\"data/respopagesex2024.csv\",\n  col_types = cols(\n    Age = col_character()\n  )\n) %&gt;%\n  rename(\n    Planning_Area = PA,\n    Subzone = SZ,\n    Population = Pop\n  ) %&gt;%\n  mutate(\n    Age_Num = if_else(Age == \"90_and_Over\", 90L, as.integer(Age)),\n    AgeGroup = case_when(\n      Age_Num &lt;= 14 ~ \"Children (0–14)\",\n      Age_Num &lt;= 24 ~ \"Youth (15–24)\",\n      Age_Num &lt;= 64 ~ \"Adults (25–64)\",\n      TRUE ~ \"Elderly (65+)\"\n    ),\n    AgeGroup = factor(\n      AgeGroup,\n      levels = c(\"Children (0–14)\", \"Youth (15–24)\", \"Adults (25–64)\", \"Elderly (65+)\")\n    ),\n    Region = case_when(\n      Planning_Area %in% c(\n        \"Ang Mo Kio\", \"Hougang\", \"Punggol\", \"Sengkang\", \"Serangoon\",\n        \"Seletar\", \"North-Eastern Islands\"\n      ) ~ \"North-East\",\n      Planning_Area %in% c(\n        \"Bedok\", \"Pasir Ris\", \"Tampines\", \"Changi\", \"Changi Bay\", \"Paya Lebar\"\n      ) ~ \"East\",\n      Planning_Area %in% c(\n        \"Bishan\", \"Bukit Merah\", \"Bukit Timah\", \"Downtown Core\", \"Geylang\", \"Kallang\",\n        \"Marine Parade\", \"Museum\", \"Newton\", \"Novena\", \"Orchard\", \"Outram\", \"Queenstown\",\n        \"River Valley\", \"Rochor\", \"Singapore River\", \"Southern Islands\", \"Straits View\",\n        \"Tanglin\", \"Toa Payoh\"\n      ) ~ \"Central\",\n      Planning_Area %in% c(\n        \"Boon Lay\", \"Bukit Batok\", \"Bukit Panjang\", \"Choa Chu Kang\", \"Clementi\", \"Jurong East\",\n        \"Jurong West\", \"Pioneer\", \"Tengah\", \"Tuas\", \"Western Islands\", \"Western Water Catchment\"\n      ) ~ \"West\",\n      Planning_Area %in% c(\n        \"Lim Chu Kang\", \"Mandai\", \"Sembawang\", \"Simpang\", \"Sungei Kadut\", \"Woodlands\",\n        \"Yishun\", \"Central Water Catchment\"\n      ) ~ \"North\",\n    )\n  )\n\n\nPreview of Updated Dataset (Header)Preview of Updated Dataset (Glimpse)\n\n\n\n\n# A tibble: 6 × 9\n  Planning_Area Subzone     Age   Sex   Population  Time Age_Num AgeGroup Region\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;    &lt;chr&gt; \n1 Ang Mo Kio    Ang Mo Kio… 0     Males         10  2024       0 Childre… North…\n2 Ang Mo Kio    Ang Mo Kio… 0     Fema…         10  2024       0 Childre… North…\n3 Ang Mo Kio    Ang Mo Kio… 1     Males         10  2024       1 Childre… North…\n4 Ang Mo Kio    Ang Mo Kio… 1     Fema…         10  2024       1 Childre… North…\n5 Ang Mo Kio    Ang Mo Kio… 2     Males         10  2024       2 Childre… North…\n6 Ang Mo Kio    Ang Mo Kio… 2     Fema…         10  2024       2 Childre… North…\n\n\n\n\n\n\nRows: 60,424\nColumns: 9\n$ Planning_Area &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", …\n$ Subzone       &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang…\n$ Age           &lt;chr&gt; \"0\", \"0\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\", \"4\", \"4\", \"5\", \"…\n$ Sex           &lt;chr&gt; \"Males\", \"Females\", \"Males\", \"Females\", \"Males\", \"Female…\n$ Population    &lt;dbl&gt; 10, 10, 10, 10, 10, 10, 10, 10, 30, 10, 20, 10, 20, 30, …\n$ Time          &lt;dbl&gt; 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 2024, 20…\n$ Age_Num       &lt;int&gt; 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,…\n$ AgeGroup      &lt;fct&gt; Children (0–14), Children (0–14), Children (0–14), Child…\n$ Region        &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"North-East\", …"
  },
  {
    "objectID": "T1/takehome_ex01v2.html#visualisations",
    "href": "T1/takehome_ex01v2.html#visualisations",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01v2.html#x-population-density---overall-and-by-region",
    "href": "T1/takehome_ex01v2.html#x-population-density---overall-and-by-region",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# === STEP 1: OVERALL PLOT ===\n\n# Prepare overall dataset\noverall_df &lt;- df %&gt;%\n  filter(!is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Compute peak by Region\noverall_peaks &lt;- overall_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    d = list(density(Age_Num)),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = d$x[which.max(d$y)],\n    label = paste0(Region, \": Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n# Combine labels\noverall_annotation &lt;- paste(overall_peaks$label, collapse = \"\\n\")\n\n# Overall plot\noverall_plot &lt;- ggplot(overall_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\", linewidth = 0.7) +\n  annotate(\"text\", x = 5, y = Inf, vjust = 1.2,\n           label = overall_annotation, hjust = 0, size = 3.5, fontface = \"italic\") +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Distribution (2024): Overall\",\n    subtitle = \"Density by Region with Y-axis scaled per chart\",\n    x = \"Age\", y = \"Relative Density\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"right\"\n  )\n\n# === STEP 2: REGION FUNCTION ===\n\ncompute_top3_peaks &lt;- function(region_df) {\n  region_df %&gt;%\n    group_by(Planning_Area) %&gt;%\n    summarise(d = list(density(Age_Num)), .groups = \"drop\") %&gt;%\n    rowwise() %&gt;%\n    mutate(\n      peak_x = d$x[which.max(d$y)],\n      peak_y = max(d$y)\n    ) %&gt;%\n    ungroup() %&gt;%\n    slice_max(order_by = peak_y, n = 3) %&gt;%\n    mutate(label = Planning_Area) %&gt;%\n    select(Planning_Area, peak_x, peak_y, label)\n}\n\nmake_region_plot &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- df %&gt;%\n    filter(Region == region_name, !is.na(Age_Num)) %&gt;%\n    group_by(Planning_Area, Age_Num) %&gt;%\n    summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n    uncount(weights = Population) %&gt;%\n    mutate(Planning_Area = factor(Planning_Area))\n\n  # Colors\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  base_colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(base_colors) &lt;- levels(region_df$Planning_Area)\n\n  # Top 3 peak labels\n  peak_labels &lt;- compute_top3_peaks(region_df)\n\n  ggplot(region_df, aes(x = Age_Num, fill = Planning_Area, color = Planning_Area)) +\n    geom_density(alpha = 0.5, linewidth = 0.7) +\n    ggrepel::geom_label_repel(\n      data = peak_labels,\n      aes(x = peak_x, y = peak_y, label = label, fill = Planning_Area),\n      color = \"black\", size = 3,\n      box.padding = 0.3, segment.color = \"grey50\", show.legend = FALSE\n    ) +\n    scale_fill_manual(values = base_colors, guide = guide_legend(override.aes = list(alpha = 1))) +\n    scale_color_manual(values = base_colors, guide = \"none\") +\n    scale_x_continuous(breaks = seq(0, 90, 10)) +\n    labs(\n      title = paste(\"Age Distribution –\", region_name),\n      x = \"Age\", y = \"Relative Density\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"right\"\n    )\n}\n\n# === STEP 3: Region Plots ===\n\ncentral_plot     &lt;- make_region_plot(\"Central\", \"Set2\")\neast_plot        &lt;- make_region_plot(\"East\", \"Pastel1\")\nnorth_plot       &lt;- make_region_plot(\"North\", \"Accent\")\nnorth_east_plot  &lt;- make_region_plot(\"North-East\", \"Dark2\")\nwest_plot        &lt;- make_region_plot(\"West\", \"Set3\")\n\n# === STEP 4: Assemble Layout ===\n\nfinal_plot &lt;- \n  overall_plot /\n  (central_plot | east_plot) /\n  (north_plot | north_east_plot) /\n  (west_plot + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Age Distribution (2024): Overall and by Region\",\n    subtitle = \"Top: Overall with regional overlay | Below: Each region shows its planning areas (Top 3 labelled)\\nY-axis scales independently per chart\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 5: Render ===\nfinal_plot"
  },
  {
    "objectID": "T1/takehome_ex01.html#visualisations",
    "href": "T1/takehome_ex01.html#visualisations",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# Find the maximum age\nmax_age &lt;- max(df$Age_Num, na.rm = TRUE)\n\n# Prepare the data\nplot_df &lt;- df %&gt;%\n  mutate(\n    AgeGroup = cut(\n      Age_Num,\n      breaks = if (max_age &gt; 90) {\n        c(seq(0, 85, by = 5), 90, max_age + 1)\n      } else {\n        c(seq(0, 85, by = 5), max_age + 1)\n      },\n      right = FALSE,\n      labels = if (max_age &gt; 90) {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      } else {\n        c(paste0(seq(0, 80, by = 5), \"-\", seq(4, 84, by = 5)), \"90+\")\n      }\n    )\n  ) %&gt;%\n  group_by(AgeGroup, Sex) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  mutate(\n    Population = ifelse(Sex == \"Males\", -Population, Population),\n    PopulationAbs = abs(Population)\n  )\n\n# Plot\nggplot(plot_df, aes(x = AgeGroup, y = Population, fill = Sex)) +\n  geom_bar(stat = \"identity\", width = 0.90, color = \"black\") +\n  geom_text_repel(\n    aes(label = format(PopulationAbs, big.mark = \",\")),\n    size = 3,\n    direction = \"y\",\n    nudge_y = 15000 * sign(plot_df$Population),\n    hjust = 0.5,\n    segment.color = NA,\n    show.legend = FALSE\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Singapore's Population Pyramid (2024) by 5-Year Age Groups\",\n    x = \"Age Group\",\n    y = \"Population Size\"\n  ) +\n  scale_y_continuous(\n    labels = function(x) format(abs(x), big.mark = \",\", scientific = FALSE),\n    limits = c(-200000, 200000),\n    breaks = seq(-200000, 200000, by = 50000),\n    minor_breaks = seq(-200000, 200000, by = 25000)\n  ) +\n  scale_fill_manual(\n    values = c(\"Males\" = \"#87CEFA\", \"Females\" = \"#FFB6C1\"),\n    breaks = c(\"Males\", \"Females\")\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0),\n    panel.grid.minor.x = element_line(color = \"grey85\", size = 0.3)\n  )"
  },
  {
    "objectID": "T1/takehome_ex01.html#x-population-density---overall-and-by-region",
    "href": "T1/takehome_ex01.html#x-population-density---overall-and-by-region",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# === STEP 1: OVERALL PLOT ===\n\n# Prepare overall dataset\noverall_df &lt;- df %&gt;%\n  filter(!is.na(Age_Num)) %&gt;%\n  group_by(Region, Age_Num) %&gt;%\n  summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n  uncount(weights = Population)\n\n# Compute peak by Region\noverall_peaks &lt;- overall_df %&gt;%\n  group_by(Region) %&gt;%\n  summarise(\n    d = list(density(Age_Num)),\n    .groups = \"drop\"\n  ) %&gt;%\n  rowwise() %&gt;%\n  mutate(\n    peak_x = d$x[which.max(d$y)],\n    label = paste0(Region, \": Age \", round(peak_x))\n  ) %&gt;%\n  ungroup()\n\n# Combine labels\noverall_annotation &lt;- paste(overall_peaks$label, collapse = \"\\n\")\n\n# Overall plot\noverall_plot &lt;- ggplot(overall_df, aes(x = Age_Num, fill = Region)) +\n  geom_density(alpha = 0.6, color = \"black\", linewidth = 0.7) +\n  annotate(\"text\", x = 5, y = Inf, vjust = 1.2,\n           label = overall_annotation, hjust = 0, size = 3.5, fontface = \"italic\") +\n  scale_x_continuous(breaks = seq(0, 90, 10)) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Age Distribution (2024): Overall\",\n    subtitle = \"Density by Region with Y-axis scaled per chart\",\n    x = \"Age\", y = \"Relative Density\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"right\"\n  )\n\n# === STEP 2: REGION FUNCTION ===\n\ncompute_top3_peaks &lt;- function(region_df) {\n  region_df %&gt;%\n    group_by(Planning_Area) %&gt;%\n    summarise(d = list(density(Age_Num)), .groups = \"drop\") %&gt;%\n    rowwise() %&gt;%\n    mutate(\n      peak_x = d$x[which.max(d$y)],\n      peak_y = max(d$y)\n    ) %&gt;%\n    ungroup() %&gt;%\n    slice_max(order_by = peak_y, n = 3) %&gt;%\n    mutate(label = Planning_Area) %&gt;%\n    select(Planning_Area, peak_x, peak_y, label)\n}\n\nmake_region_plot &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- df %&gt;%\n    filter(Region == region_name, !is.na(Age_Num)) %&gt;%\n    group_by(Planning_Area, Age_Num) %&gt;%\n    summarise(Population = sum(Population), .groups = \"drop\") %&gt;%\n    uncount(weights = Population) %&gt;%\n    mutate(Planning_Area = factor(Planning_Area))\n\n  # Colors\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  base_colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(base_colors) &lt;- levels(region_df$Planning_Area)\n\n  # Top 3 peak labels\n  peak_labels &lt;- compute_top3_peaks(region_df)\n\n  ggplot(region_df, aes(x = Age_Num, fill = Planning_Area, color = Planning_Area)) +\n    geom_density(alpha = 0.5, linewidth = 0.7) +\n    ggrepel::geom_label_repel(\n      data = peak_labels,\n      aes(x = peak_x, y = peak_y, label = label, fill = Planning_Area),\n      color = \"black\", size = 3,\n      box.padding = 0.3, segment.color = \"grey50\", show.legend = FALSE\n    ) +\n    scale_fill_manual(values = base_colors, guide = guide_legend(override.aes = list(alpha = 1))) +\n    scale_color_manual(values = base_colors, guide = \"none\") +\n    scale_x_continuous(breaks = seq(0, 90, 10)) +\n    labs(\n      title = paste(\"Age Distribution –\", region_name),\n      x = \"Age\", y = \"Relative Density\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"right\"\n    )\n}\n\n# === STEP 3: Region Plots ===\n\ncentral_plot     &lt;- make_region_plot(\"Central\", \"Set2\")\neast_plot        &lt;- make_region_plot(\"East\", \"Pastel1\")\nnorth_plot       &lt;- make_region_plot(\"North\", \"Accent\")\nnorth_east_plot  &lt;- make_region_plot(\"North-East\", \"Dark2\")\nwest_plot        &lt;- make_region_plot(\"West\", \"Set3\")\n\n# === STEP 4: Assemble Layout ===\n\nfinal_plot &lt;- \n  overall_plot /\n  (central_plot | east_plot) /\n  (north_plot | north_east_plot) /\n  (west_plot + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Age Distribution (2024): Overall and by Region\",\n    subtitle = \"Top: Overall with regional overlay | Below: Each region shows its planning areas (Top 3 labelled)\\nY-axis scales independently per chart\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 5: Render ===\nfinal_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nY-Axes are not unified across the charts\n\n\n\nY-Axes are not unified across the charts to maintain relative comparison of regions and planning areas within a chart, please do not compare across charts. The intent of individual facets are to provide more context within each region.\n\n\n\n\n\n\n\n\nInsights"
  },
  {
    "objectID": "T1/takehome_ex01.html#section",
    "href": "T1/takehome_ex01.html#section",
    "title": "Take Home Exercise 1",
    "section": "",
    "text": "# === STEP 1: Prepare Population-weighted Data ===\nviolin_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  uncount(weights = Population) %&gt;%\n  mutate(Planning_Area = factor(Planning_Area))\n\n# === STEP 2: Overall Violin + Boxplot ===\noverall_violin &lt;- ggplot(violin_df, aes(x = Region, y = Age_Num, fill = Region)) +\n  geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.6) +\n  geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8) +\n  scale_fill_brewer(palette = \"Set2\") +\n  labs(\n    title = \"Violin + Boxplot – Age Distribution (2024): Overall\",\n    subtitle = \"Population-weighted by Region\",\n    x = \"Region\", y = \"Age\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"none\"\n  )\n\n# === STEP 3: Region Function – Violin + Boxplot ===\nmake_violin_region &lt;- function(region_name, palette_name = \"Set2\") {\n  region_df &lt;- violin_df %&gt;%\n    filter(Region == region_name)\n\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  colors &lt;- if (n_colors &lt;= 8) {\n    brewer.pal(8, palette_name)[1:n_colors]\n  } else {\n    colorRampPalette(brewer.pal(8, palette_name))(n_colors)\n  }\n  names(colors) &lt;- levels(region_df$Planning_Area)\n\n  ggplot(region_df, aes(x = Planning_Area, y = Age_Num, fill = Planning_Area)) +\n    geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.5) +\n    geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8) +\n    scale_fill_manual(values = colors) +\n    labs(\n      title = paste(\"Violin + Boxplot –\", region_name),\n      x = \"Planning Area\", y = \"Age\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      axis.text.x = element_text(angle = 90, hjust = 1),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"none\"\n    )\n}\n\n# === STEP 4: Region Plots ===\ncentral_violin     &lt;- make_violin_region(\"Central\", \"Set2\")\neast_violin        &lt;- make_violin_region(\"East\", \"Pastel1\")\nnorth_violin       &lt;- make_violin_region(\"North\", \"Accent\")\nnorth_east_violin  &lt;- make_violin_region(\"North-East\", \"Dark2\")\nwest_violin        &lt;- make_violin_region(\"West\", \"Set3\")\n\n# === STEP 5: Layout ===\nviolin_boxplot_grid &lt;- \n  overall_violin /\n  (central_violin | east_violin) /\n  (north_violin | north_east_violin) /\n  (west_violin + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Violin + Boxplot of Age Distribution (2024)\",\n    subtitle = \"Top: Overall by Region | Below: By Planning Area in each Region (Population-weighted)\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 6: Render ===\nviolin_boxplot_grid\n\n\n\n\n\n\n\n\n\n# === STEP 1: Load Required Libraries ===\npacman::p_load(tidyverse, patchwork, ggrepel, RColorBrewer)\n\n# === STEP 2: Prepare Population-weighted Data ===\nviolin_df &lt;- df %&gt;%\n  filter(!is.na(Region), !is.na(Age_Num)) %&gt;%\n  uncount(weights = Population) %&gt;%\n  mutate(Planning_Area = factor(Planning_Area))\n\n# === STEP 3: Define Region Base Colors ===\nregion_base_colors &lt;- c(\n  \"Central\"     = \"#66C2A5\",  # teal\n  \"East\"        = \"#FC8D62\",  # orange\n  \"North\"       = \"#8DA0CB\",  # blue\n  \"North-East\"  = \"#E78AC3\",  # pink\n  \"West\"        = \"#A6D854\"   # green\n)\n\n# === STEP 4: Compute Median Age Helper ===\nget_median_labels &lt;- function(data, group_col) {\n  data %&gt;%\n    group_by(across(all_of(group_col))) %&gt;%\n    summarise(median_age = median(Age_Num), .groups = \"drop\") %&gt;%\n    mutate(label = round(median_age, 1))\n}\n\n# === STEP 5: Overall Violin + Boxplot ===\nregion_medians &lt;- get_median_labels(violin_df, \"Region\")\n\noverall_violin &lt;- ggplot(violin_df, aes(x = Region, y = Age_Num, fill = Region)) +\n  geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.6) +\n  geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.85, color = \"black\") +\n  geom_text(\n    data = region_medians,\n    aes(x = Region, y = median_age, label = label),\n    inherit.aes = FALSE,\n    size = 4, fontface = \"italic\", vjust = -0.8\n  ) +\n  scale_fill_manual(values = region_base_colors) +\n  labs(\n    title = \"Violin + Boxplot – Age Distribution (2024): Overall\",\n    subtitle = \"Population-weighted by Region (Median age labeled)\",\n    x = \"Region\", y = \"Age\", fill = \"Region\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    panel.border = element_rect(color = \"grey50\", fill = NA),\n    legend.position = \"none\"\n  )\n\n# === STEP 6: Region Function – Violin + Boxplot by Planning Area ===\nmake_violin_region &lt;- function(region_name, base_color) {\n  region_df &lt;- violin_df %&gt;% filter(Region == region_name)\n\n  # Compute medians and sort Planning Areas in descending order\n  pa_medians &lt;- get_median_labels(region_df, \"Planning_Area\") %&gt;%\n    arrange(desc(median_age))\n\n  # Reorder factors by descending median age\n  region_df$Planning_Area &lt;- factor(region_df$Planning_Area,\n                                    levels = pa_medians$Planning_Area)\n  pa_medians$Planning_Area &lt;- factor(pa_medians$Planning_Area,\n                                     levels = pa_medians$Planning_Area)\n\n  # Reverse gradient (darkest color left)\n  n_colors &lt;- length(levels(region_df$Planning_Area))\n  color_shades &lt;- colorRampPalette(c(base_color, \"white\"))(n_colors)\n  color_shades &lt;- rev(color_shades)  # Darkest on the left\n  names(color_shades) &lt;- levels(region_df$Planning_Area)\n\n  ggplot(region_df, aes(x = Planning_Area, y = Age_Num, fill = Planning_Area)) +\n    geom_violin(trim = FALSE, scale = \"area\", color = \"black\", alpha = 0.5) +\n    geom_boxplot(width = 0.15, outlier.shape = NA, alpha = 0.8, color = \"black\") +\n    geom_text(\n      data = pa_medians,\n      aes(x = Planning_Area, y = median_age, label = label),\n      inherit.aes = FALSE, size = 3.5, vjust = -0.8, fontface = \"italic\"\n    ) +\n    scale_fill_manual(values = color_shades) +\n    labs(\n      title = paste(\"Violin + Boxplot –\", region_name),\n      x = \"Planning Area\", y = \"Age\", fill = \"Planning Area\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(face = \"bold\", hjust = 0.5),\n      axis.text.x = element_text(angle = 90, hjust = 1, size = 7),\n      panel.border = element_rect(color = \"grey50\", fill = NA),\n      legend.position = \"none\"\n    )\n}\n\n# === STEP 7: Region Violin Plots ===\ncentral_violin     &lt;- make_violin_region(\"Central\", region_base_colors[\"Central\"])\neast_violin        &lt;- make_violin_region(\"East\", region_base_colors[\"East\"])\nnorth_violin       &lt;- make_violin_region(\"North\", region_base_colors[\"North\"])\nnorth_east_violin  &lt;- make_violin_region(\"North-East\", region_base_colors[\"North-East\"])\nwest_violin        &lt;- make_violin_region(\"West\", region_base_colors[\"West\"])\n\n# === STEP 8: Assemble Layout ===\nviolin_boxplot_grid &lt;- \n  overall_violin /\n  (central_violin | east_violin) /\n  (north_violin | north_east_violin) /\n  (west_violin + patchwork::plot_spacer()) +\n  plot_layout(heights = c(1.2, 1, 1, 1)) +\n  plot_annotation(\n    title = \"Violin + Boxplot of Age Distribution (2024)\",\n    subtitle = \"Top: Overall by Region | Below: Planning Areas sorted by Median Age (Descending)\\nColor fades left to right by age rank\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n      plot.subtitle = element_text(size = 11, hjust = 0.5)\n    )\n  )\n\n# === STEP 9: Render ===\nviolin_boxplot_grid"
  }
]