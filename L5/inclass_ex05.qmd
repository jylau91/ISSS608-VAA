---
title: "In-Class Exercise 05"
author: "Lau Jia Yi"
date: 17 May 2025
date-modified: "last-modified"
format: html
editor: visual
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

```{r}
pacman::p_load(tidyverse, jsonlite, SmartEDA, tidygraph, ggraph)
```

### Load json file

Use fromJSON() of **jsonlite** to import MC1_graph.json file into R and save the outpout object as kg.

```{r}
kg <- fromJSON("MC1/data/MC1_graph.json")
```

### Inspect structure

```{r}
str(kg, max.level = 3)
```

### Extract and inspect

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```

## Initial EDA

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`)) +
  geom_bar()
```

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`)) +
  geom_bar()

```

## Creating Knowledge Graph

### Step 1 Mapping from node id to row index

```{r}
id_map <- tibble(id = nodes_tbl$id,
                  index = seq_len(
                    nrow(nodes_tbl)))
```

This ensures each id from your node list is mapped to the correct row number.

### Step 2: Map source and target IDs to row indices

```{r eval=FALSE}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id")) %>%
  rename(to = index)
```

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map, by = c("source" = "id"), suffix = c("", "_source")) %>%
  rename(from = index) %>%
  left_join(id_map, by = c("target" = "id"), suffix = c("", "_target")) %>%
  rename(to = index)

```

### Step 3: Filter out any unmatched invalid edges

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from) & !is.na(to))
```

### Step 4: Creating the graph

Lastly, tbl_graph() is used to create tidygraph's graph object by using the code chunk below.

```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tbl,
                   directed = kg$directed)
```

## Visualising the knowledge graph

```{r}
set.seed(1234)
```

### Visualising the whole graph

```{r}
#| eval: false

ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()

```

### Visualising the sub-graph

### Step 1: Filter edges to only MemberOf

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

17,412 elements will still remain, as nodes of those not applicable to MemberOf still remain in grapH_memberof.

### Step 2: Extract only connected nodes (i.e., used in these edges)

```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

The code above then removes other nodes not used in the edges of MemberOf

### Step 3: Keep only those nodes

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id) # optional cleanup

```

```{r}
ggraph(graph_memberof, layout = "fr") +
  geom_edge_link(alpha = 0.5,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 1) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```
